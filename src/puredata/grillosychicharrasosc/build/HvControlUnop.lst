ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccRoi8TA.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 2
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"HvControlUnop.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.cUnop_onMessage,"ax",%progbits
  19              		.align	1
  20              		.p2align 2,,3
  21              		.global	cUnop_onMessage
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	cUnop_onMessage:
  27              	.LVL0:
  28              	.LFB399:
  29              		.file 1 "source/HvControlUnop.c"
   1:source/HvControlUnop.c **** /**
   2:source/HvControlUnop.c ****  * Copyright (c) 2014-2018 Enzien Audio Ltd.
   3:source/HvControlUnop.c ****  *
   4:source/HvControlUnop.c ****  * Permission to use, copy, modify, and/or distribute this software for any
   5:source/HvControlUnop.c ****  * purpose with or without fee is hereby granted, provided that the above
   6:source/HvControlUnop.c ****  * copyright notice and this permission notice appear in all copies.
   7:source/HvControlUnop.c ****  *
   8:source/HvControlUnop.c ****  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
   9:source/HvControlUnop.c ****  * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  10:source/HvControlUnop.c ****  * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  11:source/HvControlUnop.c ****  * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  12:source/HvControlUnop.c ****  * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  13:source/HvControlUnop.c ****  * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  14:source/HvControlUnop.c ****  * PERFORMANCE OF THIS SOFTWARE.
  15:source/HvControlUnop.c ****  */
  16:source/HvControlUnop.c **** 
  17:source/HvControlUnop.c **** #include "HvControlUnop.h"
  18:source/HvControlUnop.c **** 
  19:source/HvControlUnop.c **** void cUnop_onMessage(HeavyContextInterface *_c, UnopType op, const HvMessage *m,
  20:source/HvControlUnop.c ****     void (*sendMessage)(HeavyContextInterface *, int, const HvMessage *)) {
  30              		.loc 1 20 75 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 8
  33              		@ frame_needed = 1, uses_anonymous_args = 0
  21:source/HvControlUnop.c ****   if (msg_isFloat(m, 0)) {
  34              		.loc 1 21 3 view .LVU1
  35              	.LBB30:
  36              	.LBI30:
  37              		.file 2 "source/HvMessage.h"
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccRoi8TA.s 			page 2


   1:source/HvMessage.h **** /**
   2:source/HvMessage.h ****  * Copyright (c) 2014-2018 Enzien Audio Ltd.
   3:source/HvMessage.h ****  *
   4:source/HvMessage.h ****  * Permission to use, copy, modify, and/or distribute this software for any
   5:source/HvMessage.h ****  * purpose with or without fee is hereby granted, provided that the above
   6:source/HvMessage.h ****  * copyright notice and this permission notice appear in all copies.
   7:source/HvMessage.h ****  *
   8:source/HvMessage.h ****  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
   9:source/HvMessage.h ****  * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  10:source/HvMessage.h ****  * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  11:source/HvMessage.h ****  * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  12:source/HvMessage.h ****  * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  13:source/HvMessage.h ****  * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  14:source/HvMessage.h ****  * PERFORMANCE OF THIS SOFTWARE.
  15:source/HvMessage.h ****  */
  16:source/HvMessage.h **** 
  17:source/HvMessage.h **** #ifndef _HEAVY_MESSAGE_H_
  18:source/HvMessage.h **** #define _HEAVY_MESSAGE_H_
  19:source/HvMessage.h **** 
  20:source/HvMessage.h **** #include "HvUtils.h"
  21:source/HvMessage.h **** 
  22:source/HvMessage.h **** #ifdef __cplusplus
  23:source/HvMessage.h **** extern "C" {
  24:source/HvMessage.h **** #endif
  25:source/HvMessage.h **** 
  26:source/HvMessage.h **** typedef enum ElementType {
  27:source/HvMessage.h ****   HV_MSG_BANG = 0,
  28:source/HvMessage.h ****   HV_MSG_FLOAT = 1,
  29:source/HvMessage.h ****   HV_MSG_SYMBOL = 2,
  30:source/HvMessage.h ****   HV_MSG_HASH = 3
  31:source/HvMessage.h **** } ElementType;
  32:source/HvMessage.h **** 
  33:source/HvMessage.h **** typedef struct Element {
  34:source/HvMessage.h ****   ElementType type;
  35:source/HvMessage.h ****   union {
  36:source/HvMessage.h ****     float f; // float
  37:source/HvMessage.h ****     const char *s; // symbol
  38:source/HvMessage.h ****     hv_uint32_t h; // hash
  39:source/HvMessage.h ****   } data;
  40:source/HvMessage.h **** } Element;
  41:source/HvMessage.h **** 
  42:source/HvMessage.h **** typedef struct HvMessage {
  43:source/HvMessage.h ****   hv_uint32_t timestamp; // the sample at which this message should be processed
  44:source/HvMessage.h ****   hv_uint16_t numElements;
  45:source/HvMessage.h ****   hv_uint16_t numBytes; // the total number of bytes that this message occupies in memory, includin
  46:source/HvMessage.h ****   Element elem;
  47:source/HvMessage.h **** } HvMessage;
  48:source/HvMessage.h **** 
  49:source/HvMessage.h **** typedef struct ReceiverMessagePair {
  50:source/HvMessage.h ****   hv_uint32_t receiverHash;
  51:source/HvMessage.h ****   HvMessage msg;
  52:source/HvMessage.h **** } ReceiverMessagePair;
  53:source/HvMessage.h **** 
  54:source/HvMessage.h **** #define HV_MESSAGE_ON_STACK(_x) (HvMessage *) hv_alloca(msg_getCoreSize(_x))
  55:source/HvMessage.h **** 
  56:source/HvMessage.h **** /** Returns the number of bytes that this message consumes in memory, not including strings. */
  57:source/HvMessage.h **** static inline hv_size_t msg_getCoreSize(hv_size_t numElements) {
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccRoi8TA.s 			page 3


  58:source/HvMessage.h ****   hv_assert(numElements > 0);
  59:source/HvMessage.h ****   return sizeof(HvMessage) + ((numElements-1) * sizeof(Element));
  60:source/HvMessage.h **** }
  61:source/HvMessage.h **** 
  62:source/HvMessage.h **** HvMessage *msg_copy(const HvMessage *m);
  63:source/HvMessage.h **** 
  64:source/HvMessage.h **** /** Copies the message into the given buffer. The buffer must be at least as large as msg_getNumHea
  65:source/HvMessage.h **** void msg_copyToBuffer(const HvMessage *m, char *buffer, hv_size_t len);
  66:source/HvMessage.h **** 
  67:source/HvMessage.h **** void msg_setElementToFrom(HvMessage *n, int indexN, const HvMessage *const m, int indexM);
  68:source/HvMessage.h **** 
  69:source/HvMessage.h **** /** Frees a message on the heap. Does nothing if argument is NULL. */
  70:source/HvMessage.h **** void msg_free(HvMessage *m);
  71:source/HvMessage.h **** 
  72:source/HvMessage.h **** HvMessage *msg_init(HvMessage *m, hv_size_t numElements, hv_uint32_t timestamp);
  73:source/HvMessage.h **** 
  74:source/HvMessage.h **** HvMessage *msg_initWithFloat(HvMessage *m, hv_uint32_t timestamp, float f);
  75:source/HvMessage.h **** 
  76:source/HvMessage.h **** HvMessage *msg_initWithBang(HvMessage *m, hv_uint32_t timestamp);
  77:source/HvMessage.h **** 
  78:source/HvMessage.h **** HvMessage *msg_initWithSymbol(HvMessage *m, hv_uint32_t timestamp, const char *s);
  79:source/HvMessage.h **** 
  80:source/HvMessage.h **** HvMessage *msg_initWithHash(HvMessage *m, hv_uint32_t timestamp, hv_uint32_t h);
  81:source/HvMessage.h **** 
  82:source/HvMessage.h **** static inline hv_uint32_t msg_getTimestamp(const HvMessage *m) {
  83:source/HvMessage.h ****   return m->timestamp;
  84:source/HvMessage.h **** }
  85:source/HvMessage.h **** 
  86:source/HvMessage.h **** static inline void msg_setTimestamp(HvMessage *m, hv_uint32_t timestamp) {
  87:source/HvMessage.h ****   m->timestamp = timestamp;
  88:source/HvMessage.h **** }
  89:source/HvMessage.h **** 
  90:source/HvMessage.h **** static inline int msg_getNumElements(const HvMessage *m) {
  91:source/HvMessage.h ****   return (int) m->numElements;
  92:source/HvMessage.h **** }
  93:source/HvMessage.h **** 
  94:source/HvMessage.h **** /** Returns the total number of bytes this message consumes in memory. */
  95:source/HvMessage.h **** static inline hv_uint32_t msg_getSize(const HvMessage *m) {
  96:source/HvMessage.h ****   return m->numBytes;
  97:source/HvMessage.h **** }
  98:source/HvMessage.h **** 
  99:source/HvMessage.h **** static inline ElementType msg_getType(const HvMessage *m, int index) {
 100:source/HvMessage.h ****   hv_assert(index < msg_getNumElements(m)); // invalid index
 101:source/HvMessage.h ****   return (&(m->elem)+index)->type;
 102:source/HvMessage.h **** }
 103:source/HvMessage.h **** 
 104:source/HvMessage.h **** static inline void msg_setBang(HvMessage *m, int index) {
 105:source/HvMessage.h ****   hv_assert(index < msg_getNumElements(m)); // invalid index
 106:source/HvMessage.h ****   (&(m->elem)+index)->type = HV_MSG_BANG;
 107:source/HvMessage.h ****   (&(m->elem)+index)->data.s = NULL;
 108:source/HvMessage.h **** }
 109:source/HvMessage.h **** 
 110:source/HvMessage.h **** static inline bool msg_isBang(const HvMessage *m, int index) {
 111:source/HvMessage.h ****   return (index < msg_getNumElements(m)) ? (msg_getType(m,index) == HV_MSG_BANG) : false;
 112:source/HvMessage.h **** }
 113:source/HvMessage.h **** 
 114:source/HvMessage.h **** static inline void msg_setFloat(HvMessage *m, int index, float f) {
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccRoi8TA.s 			page 4


 115:source/HvMessage.h ****   hv_assert(index < msg_getNumElements(m)); // invalid index
 116:source/HvMessage.h ****   (&(m->elem)+index)->type = HV_MSG_FLOAT;
 117:source/HvMessage.h ****   (&(m->elem)+index)->data.f = f;
 118:source/HvMessage.h **** }
 119:source/HvMessage.h **** 
 120:source/HvMessage.h **** static inline float msg_getFloat(const HvMessage *const m, int index) {
 121:source/HvMessage.h ****   hv_assert(index < msg_getNumElements(m)); // invalid index
 122:source/HvMessage.h ****   return (&(m->elem)+index)->data.f;
 123:source/HvMessage.h **** }
 124:source/HvMessage.h **** 
 125:source/HvMessage.h **** static inline bool msg_isFloat(const HvMessage *const m, int index) {
  38              		.loc 2 125 20 view .LVU2
  39              	.LBB31:
 126:source/HvMessage.h ****   return (index < msg_getNumElements(m)) ? (msg_getType(m,index) == HV_MSG_FLOAT) : false;
  40              		.loc 2 126 3 view .LVU3
  41              	.LBB32:
  42              	.LBI32:
  90:source/HvMessage.h ****   return (int) m->numElements;
  43              		.loc 2 90 19 view .LVU4
  44              	.LBB33:
  91:source/HvMessage.h **** }
  45              		.loc 2 91 3 view .LVU5
  91:source/HvMessage.h **** }
  46              		.loc 2 91 3 is_stmt 0 view .LVU6
  47              	.LBE33:
  48              	.LBE32:
  49              	.LBE31:
  50              	.LBE30:
  20:source/HvControlUnop.c ****   if (msg_isFloat(m, 0)) {
  51              		.loc 1 20 75 view .LVU7
  52 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  53              		.cfi_def_cfa_offset 20
  54              		.cfi_offset 4, -20
  55              		.cfi_offset 5, -16
  56              		.cfi_offset 6, -12
  57              		.cfi_offset 7, -8
  58              		.cfi_offset 14, -4
  59 0002 83B0     		sub	sp, sp, #12
  60              		.cfi_def_cfa_offset 32
  61 0004 1D46     		mov	r5, r3
  62              	.LBB42:
  63              	.LBB38:
  64              		.loc 2 126 83 view .LVU8
  65 0006 9388     		ldrh	r3, [r2, #4]
  66              	.LVL1:
  67              		.loc 2 126 83 view .LVU9
  68              	.LBE38:
  69              	.LBE42:
  20:source/HvControlUnop.c ****   if (msg_isFloat(m, 0)) {
  70              		.loc 1 20 75 view .LVU10
  71 0008 00AF     		add	r7, sp, #0
  72              		.cfi_def_cfa_register 7
  73              	.LBB43:
  74              	.LBB39:
  75              		.loc 2 126 83 view .LVU11
  76 000a 13B9     		cbnz	r3, .L52
  77              	.LVL2:
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccRoi8TA.s 			page 5


  78              	.L1:
  79              		.loc 2 126 83 view .LVU12
  80              	.LBE39:
  81              	.LBE43:
  22:source/HvControlUnop.c ****     float f = msg_getFloat(m, 0);
  23:source/HvControlUnop.c ****     switch (op) {
  24:source/HvControlUnop.c ****       case HV_UNOP_SIN: f = hv_sin_f(f); break;
  25:source/HvControlUnop.c ****       case HV_UNOP_SINH: f = hv_sinh_f(f); break;
  26:source/HvControlUnop.c ****       case HV_UNOP_COS: f = hv_cos_f(f); break;
  27:source/HvControlUnop.c ****       case HV_UNOP_COSH: f = hv_cosh_f(f); break;
  28:source/HvControlUnop.c ****       case HV_UNOP_TAN: f = hv_tan_f(f); break;
  29:source/HvControlUnop.c ****       case HV_UNOP_TANH: f = hv_tanh_f(f); break;
  30:source/HvControlUnop.c ****       case HV_UNOP_ASIN: f = hv_asin_f(f); break;
  31:source/HvControlUnop.c ****       case HV_UNOP_ASINH: f = hv_asinh_f(f); break;
  32:source/HvControlUnop.c ****       case HV_UNOP_ACOS: f = hv_acos_f(f); break;
  33:source/HvControlUnop.c ****       case HV_UNOP_ACOSH: f = hv_acosh_f(f); break;
  34:source/HvControlUnop.c ****       case HV_UNOP_ATAN: f = hv_atan_f(f); break;
  35:source/HvControlUnop.c ****       case HV_UNOP_ATANH: f = hv_atanh_f(f); break;
  36:source/HvControlUnop.c ****       case HV_UNOP_EXP: f = hv_exp_f(f); break;
  37:source/HvControlUnop.c ****       case HV_UNOP_ABS: f = hv_abs_f(f); break;
  38:source/HvControlUnop.c ****       case HV_UNOP_SQRT: f = (f > 0.0f) ? hv_sqrt_f(f) : 0.0f; break;
  39:source/HvControlUnop.c ****       case HV_UNOP_LOG: f = (f > 0.0f) ? hv_log_f(f) : 0.0f; break;
  40:source/HvControlUnop.c ****       case HV_UNOP_LOG2: f = (f > 0.0f) ? (1.442695040888963f*hv_log_f(f)) : 0.0f; break;
  41:source/HvControlUnop.c ****       case HV_UNOP_LOG10: f = (f > 0.0f) ? (0.434294481903252f*hv_log_f(f)) : 0.0f; break;
  42:source/HvControlUnop.c ****       case HV_UNOP_CEIL: f = hv_ceil_f(f); break;
  43:source/HvControlUnop.c ****       case HV_UNOP_FLOOR: f = hv_floor_f(f); break;
  44:source/HvControlUnop.c ****       case HV_UNOP_ROUND: f = hv_round_f(f); break;
  45:source/HvControlUnop.c ****       default: return;
  46:source/HvControlUnop.c ****     }
  47:source/HvControlUnop.c ****     HvMessage *n = HV_MESSAGE_ON_STACK(1);
  48:source/HvControlUnop.c ****     msg_initWithFloat(n, m->timestamp, f);
  49:source/HvControlUnop.c ****     sendMessage(_c, 0, n);
  50:source/HvControlUnop.c ****   }
  51:source/HvControlUnop.c **** }
  82              		.loc 1 51 1 view .LVU13
  83 000c 0C37     		adds	r7, r7, #12
  84              		.cfi_remember_state
  85              		.cfi_def_cfa_offset 20
  86 000e BD46     		mov	sp, r7
  87              		.cfi_def_cfa_register 13
  88              		@ sp needed
  89 0010 F0BD     		pop	{r4, r5, r6, r7, pc}
  90              	.LVL3:
  91              	.L52:
  92              		.cfi_restore_state
  93              	.LBB44:
  94              	.LBB40:
  95              		.loc 2 126 83 view .LVU14
  96 0012 137A     		ldrb	r3, [r2, #8]	@ zero_extendqisi2
  97 0014 1446     		mov	r4, r2
  98              	.LVL4:
  99              	.LBB34:
 100              	.LBI34:
  99:source/HvMessage.h ****   hv_assert(index < msg_getNumElements(m)); // invalid index
 101              		.loc 2 99 27 is_stmt 1 view .LVU15
 102              	.LBB35:
 100:source/HvMessage.h ****   return (&(m->elem)+index)->type;
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccRoi8TA.s 			page 6


 103              		.loc 2 100 3 view .LVU16
 100:source/HvMessage.h ****   return (&(m->elem)+index)->type;
 104              		.loc 2 100 3 is_stmt 0 view .LVU17
 105              	.LBE35:
 106              	.LBE34:
 107              	.LBE40:
 108              	.LBE44:
  91:source/HvMessage.h **** }
 109              		.loc 2 91 3 is_stmt 1 view .LVU18
 110              	.LBB45:
 111              	.LBB41:
 112              	.LBB37:
 113              	.LBB36:
 101:source/HvMessage.h **** }
 114              		.loc 2 101 3 view .LVU19
 101:source/HvMessage.h **** }
 115              		.loc 2 101 3 is_stmt 0 view .LVU20
 116              	.LBE36:
 117              	.LBE37:
 118              		.loc 2 126 83 view .LVU21
 119 0016 012B     		cmp	r3, #1
 120 0018 F8D1     		bne	.L1
 121              		.loc 2 126 83 view .LVU22
 122 001a 0646     		mov	r6, r0
 123              	.LVL5:
 124              		.loc 2 126 83 view .LVU23
 125              	.LBE41:
 126              	.LBE45:
 127              	.LBB46:
  22:source/HvControlUnop.c ****     switch (op) {
 128              		.loc 1 22 5 is_stmt 1 view .LVU24
 129              	.LBB47:
 130              	.LBI47:
 120:source/HvMessage.h ****   hv_assert(index < msg_getNumElements(m)); // invalid index
 131              		.loc 2 120 21 view .LVU25
 132              	.LBB48:
 121:source/HvMessage.h ****   return (&(m->elem)+index)->data.f;
 133              		.loc 2 121 3 view .LVU26
 121:source/HvMessage.h ****   return (&(m->elem)+index)->data.f;
 134              		.loc 2 121 3 is_stmt 0 view .LVU27
 135              	.LBE48:
 136              	.LBE47:
 137              	.LBE46:
  91:source/HvMessage.h **** }
 138              		.loc 2 91 3 is_stmt 1 view .LVU28
 139              	.LBB51:
 140              	.LBB50:
 141              	.LBB49:
 122:source/HvMessage.h **** }
 142              		.loc 2 122 3 view .LVU29
 122:source/HvMessage.h **** }
 143              		.loc 2 122 34 is_stmt 0 view .LVU30
 144 001c D2ED037A 		vldr.32	s15, [r2, #12]
 145              	.LVL6:
 122:source/HvMessage.h **** }
 146              		.loc 2 122 34 view .LVU31
 147              	.LBE49:
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccRoi8TA.s 			page 7


 148              	.LBE50:
  23:source/HvControlUnop.c ****       case HV_UNOP_SIN: f = hv_sin_f(f); break;
 149              		.loc 1 23 5 is_stmt 1 view .LVU32
 150 0020 1429     		cmp	r1, #20
 151 0022 F3D8     		bhi	.L1
 152 0024 DFE801F0 		tbb	[pc, r1]
 153              	.L32:
 154 0028 1B       		.byte	(.L11-.L32)/2
 155 0029 20       		.byte	(.L12-.L32)/2
 156 002a 25       		.byte	(.L13-.L32)/2
 157 002b 2A       		.byte	(.L14-.L32)/2
 158 002c 2F       		.byte	(.L15-.L32)/2
 159 002d 34       		.byte	(.L16-.L32)/2
 160 002e 39       		.byte	(.L4-.L32)/2
 161 002f 3E       		.byte	(.L6-.L32)/2
 162 0030 43       		.byte	(.L7-.L32)/2
 163 0031 48       		.byte	(.L8-.L32)/2
 164 0032 4D       		.byte	(.L9-.L32)/2
 165 0033 52       		.byte	(.L10-.L32)/2
 166 0034 57       		.byte	(.L17-.L32)/2
 167 0035 5C       		.byte	(.L18-.L32)/2
 168 0036 5F       		.byte	(.L19-.L32)/2
 169 0037 67       		.byte	(.L23-.L32)/2
 170 0038 71       		.byte	(.L25-.L32)/2
 171 0039 7F       		.byte	(.L27-.L32)/2
 172 003a 8D       		.byte	(.L29-.L32)/2
 173 003b 90       		.byte	(.L30-.L32)/2
 174 003c 0B       		.byte	(.L31-.L32)/2
 175 003d 00       		.p2align 1
 176              	.L31:
  44:source/HvControlUnop.c ****       default: return;
 177              		.loc 1 44 27 view .LVU33
  44:source/HvControlUnop.c ****       default: return;
 178              		.loc 1 44 31 is_stmt 0 view .LVU34
 179 003e B8FE670A 		vrinta.f32	s0, s15
 180              	.LVL7:
  44:source/HvControlUnop.c ****       default: return;
 181              		.loc 1 44 46 is_stmt 1 view .LVU35
 182              	.L5:
  47:source/HvControlUnop.c ****     msg_initWithFloat(n, m->timestamp, f);
 183              		.loc 1 47 5 view .LVU36
  47:source/HvControlUnop.c ****     msg_initWithFloat(n, m->timestamp, f);
 184              		.loc 1 47 5 is_stmt 0 view .LVU37
 185              	.LBE51:
  58:source/HvMessage.h ****   return sizeof(HvMessage) + ((numElements-1) * sizeof(Element));
 186              		.loc 2 58 3 is_stmt 1 view .LVU38
  59:source/HvMessage.h **** }
 187              		.loc 2 59 3 view .LVU39
 188              	.LBB52:
  47:source/HvControlUnop.c ****     msg_initWithFloat(n, m->timestamp, f);
 189              		.loc 1 47 20 is_stmt 0 view .LVU40
 190 0042 84B0     		sub	sp, sp, #16
  48:source/HvControlUnop.c ****     sendMessage(_c, 0, n);
 191              		.loc 1 48 5 view .LVU41
 192 0044 2168     		ldr	r1, [r4]
  47:source/HvControlUnop.c ****     msg_initWithFloat(n, m->timestamp, f);
 193              		.loc 1 47 20 view .LVU42
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccRoi8TA.s 			page 8


 194 0046 6A46     		mov	r2, sp
 195              	.LVL8:
  48:source/HvControlUnop.c ****     sendMessage(_c, 0, n);
 196              		.loc 1 48 5 is_stmt 1 view .LVU43
 197 0048 1046     		mov	r0, r2
 198 004a 7A60     		str	r2, [r7, #4]
 199 004c FFF7FEFF 		bl	msg_initWithFloat
 200              	.LVL9:
  49:source/HvControlUnop.c ****   }
 201              		.loc 1 49 5 view .LVU44
 202 0050 7A68     		ldr	r2, [r7, #4]
 203 0052 0021     		movs	r1, #0
 204 0054 3046     		mov	r0, r6
 205 0056 A847     		blx	r5
 206              	.LVL10:
 207              	.LBE52:
 208              		.loc 1 51 1 is_stmt 0 view .LVU45
 209 0058 0C37     		adds	r7, r7, #12
 210              		.cfi_remember_state
 211              		.cfi_def_cfa_offset 20
 212 005a BD46     		mov	sp, r7
 213              		.cfi_def_cfa_register 13
 214              	.LVL11:
 215              		.loc 1 51 1 view .LVU46
 216              		@ sp needed
 217 005c F0BD     		pop	{r4, r5, r6, r7, pc}
 218              	.LVL12:
 219              	.L11:
 220              		.cfi_restore_state
 221              	.LBB53:
  30:source/HvControlUnop.c ****       case HV_UNOP_ASINH: f = hv_asinh_f(f); break;
 222              		.loc 1 30 26 is_stmt 1 view .LVU47
  30:source/HvControlUnop.c ****       case HV_UNOP_ASINH: f = hv_asinh_f(f); break;
 223              		.loc 1 30 30 is_stmt 0 view .LVU48
 224 005e B0EE670A 		vmov.f32	s0, s15
 225 0062 FFF7FEFF 		bl	asinf
 226              	.LVL13:
  30:source/HvControlUnop.c ****       case HV_UNOP_ASINH: f = hv_asinh_f(f); break;
 227              		.loc 1 30 44 is_stmt 1 view .LVU49
  30:source/HvControlUnop.c ****       case HV_UNOP_ASINH: f = hv_asinh_f(f); break;
 228              		.loc 1 30 7 is_stmt 0 view .LVU50
 229 0066 ECE7     		b	.L5
 230              	.LVL14:
 231              	.L12:
  31:source/HvControlUnop.c ****       case HV_UNOP_ACOS: f = hv_acos_f(f); break;
 232              		.loc 1 31 27 is_stmt 1 view .LVU51
  31:source/HvControlUnop.c ****       case HV_UNOP_ACOS: f = hv_acos_f(f); break;
 233              		.loc 1 31 31 is_stmt 0 view .LVU52
 234 0068 B0EE670A 		vmov.f32	s0, s15
 235 006c FFF7FEFF 		bl	asinhf
 236              	.LVL15:
  31:source/HvControlUnop.c ****       case HV_UNOP_ACOS: f = hv_acos_f(f); break;
 237              		.loc 1 31 46 is_stmt 1 view .LVU53
  31:source/HvControlUnop.c ****       case HV_UNOP_ACOS: f = hv_acos_f(f); break;
 238              		.loc 1 31 7 is_stmt 0 view .LVU54
 239 0070 E7E7     		b	.L5
 240              	.LVL16:
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccRoi8TA.s 			page 9


 241              	.L13:
  32:source/HvControlUnop.c ****       case HV_UNOP_ACOSH: f = hv_acosh_f(f); break;
 242              		.loc 1 32 26 is_stmt 1 view .LVU55
  32:source/HvControlUnop.c ****       case HV_UNOP_ACOSH: f = hv_acosh_f(f); break;
 243              		.loc 1 32 30 is_stmt 0 view .LVU56
 244 0072 B0EE670A 		vmov.f32	s0, s15
 245 0076 FFF7FEFF 		bl	acosf
 246              	.LVL17:
  32:source/HvControlUnop.c ****       case HV_UNOP_ACOSH: f = hv_acosh_f(f); break;
 247              		.loc 1 32 44 is_stmt 1 view .LVU57
  32:source/HvControlUnop.c ****       case HV_UNOP_ACOSH: f = hv_acosh_f(f); break;
 248              		.loc 1 32 7 is_stmt 0 view .LVU58
 249 007a E2E7     		b	.L5
 250              	.LVL18:
 251              	.L14:
  33:source/HvControlUnop.c ****       case HV_UNOP_ATAN: f = hv_atan_f(f); break;
 252              		.loc 1 33 27 is_stmt 1 view .LVU59
  33:source/HvControlUnop.c ****       case HV_UNOP_ATAN: f = hv_atan_f(f); break;
 253              		.loc 1 33 31 is_stmt 0 view .LVU60
 254 007c B0EE670A 		vmov.f32	s0, s15
 255 0080 FFF7FEFF 		bl	acoshf
 256              	.LVL19:
  33:source/HvControlUnop.c ****       case HV_UNOP_ATAN: f = hv_atan_f(f); break;
 257              		.loc 1 33 46 is_stmt 1 view .LVU61
  33:source/HvControlUnop.c ****       case HV_UNOP_ATAN: f = hv_atan_f(f); break;
 258              		.loc 1 33 7 is_stmt 0 view .LVU62
 259 0084 DDE7     		b	.L5
 260              	.LVL20:
 261              	.L15:
  34:source/HvControlUnop.c ****       case HV_UNOP_ATANH: f = hv_atanh_f(f); break;
 262              		.loc 1 34 26 is_stmt 1 view .LVU63
  34:source/HvControlUnop.c ****       case HV_UNOP_ATANH: f = hv_atanh_f(f); break;
 263              		.loc 1 34 30 is_stmt 0 view .LVU64
 264 0086 B0EE670A 		vmov.f32	s0, s15
 265 008a FFF7FEFF 		bl	atanf
 266              	.LVL21:
  34:source/HvControlUnop.c ****       case HV_UNOP_ATANH: f = hv_atanh_f(f); break;
 267              		.loc 1 34 44 is_stmt 1 view .LVU65
  34:source/HvControlUnop.c ****       case HV_UNOP_ATANH: f = hv_atanh_f(f); break;
 268              		.loc 1 34 7 is_stmt 0 view .LVU66
 269 008e D8E7     		b	.L5
 270              	.LVL22:
 271              	.L16:
  35:source/HvControlUnop.c ****       case HV_UNOP_EXP: f = hv_exp_f(f); break;
 272              		.loc 1 35 27 is_stmt 1 view .LVU67
  35:source/HvControlUnop.c ****       case HV_UNOP_EXP: f = hv_exp_f(f); break;
 273              		.loc 1 35 31 is_stmt 0 view .LVU68
 274 0090 B0EE670A 		vmov.f32	s0, s15
 275 0094 FFF7FEFF 		bl	atanhf
 276              	.LVL23:
  35:source/HvControlUnop.c ****       case HV_UNOP_EXP: f = hv_exp_f(f); break;
 277              		.loc 1 35 46 is_stmt 1 view .LVU69
  35:source/HvControlUnop.c ****       case HV_UNOP_EXP: f = hv_exp_f(f); break;
 278              		.loc 1 35 7 is_stmt 0 view .LVU70
 279 0098 D3E7     		b	.L5
 280              	.LVL24:
 281              	.L4:
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccRoi8TA.s 			page 10


  24:source/HvControlUnop.c ****       case HV_UNOP_SINH: f = hv_sinh_f(f); break;
 282              		.loc 1 24 25 is_stmt 1 view .LVU71
  24:source/HvControlUnop.c ****       case HV_UNOP_SINH: f = hv_sinh_f(f); break;
 283              		.loc 1 24 29 is_stmt 0 view .LVU72
 284 009a B0EE670A 		vmov.f32	s0, s15
 285 009e FFF7FEFF 		bl	sinf
 286              	.LVL25:
  24:source/HvControlUnop.c ****       case HV_UNOP_SINH: f = hv_sinh_f(f); break;
 287              		.loc 1 24 42 is_stmt 1 view .LVU73
  24:source/HvControlUnop.c ****       case HV_UNOP_SINH: f = hv_sinh_f(f); break;
 288              		.loc 1 24 7 is_stmt 0 view .LVU74
 289 00a2 CEE7     		b	.L5
 290              	.LVL26:
 291              	.L6:
  25:source/HvControlUnop.c ****       case HV_UNOP_COS: f = hv_cos_f(f); break;
 292              		.loc 1 25 26 is_stmt 1 view .LVU75
  25:source/HvControlUnop.c ****       case HV_UNOP_COS: f = hv_cos_f(f); break;
 293              		.loc 1 25 30 is_stmt 0 view .LVU76
 294 00a4 B0EE670A 		vmov.f32	s0, s15
 295 00a8 FFF7FEFF 		bl	sinhf
 296              	.LVL27:
  25:source/HvControlUnop.c ****       case HV_UNOP_COS: f = hv_cos_f(f); break;
 297              		.loc 1 25 44 is_stmt 1 view .LVU77
  25:source/HvControlUnop.c ****       case HV_UNOP_COS: f = hv_cos_f(f); break;
 298              		.loc 1 25 7 is_stmt 0 view .LVU78
 299 00ac C9E7     		b	.L5
 300              	.LVL28:
 301              	.L7:
  26:source/HvControlUnop.c ****       case HV_UNOP_COSH: f = hv_cosh_f(f); break;
 302              		.loc 1 26 25 is_stmt 1 view .LVU79
  26:source/HvControlUnop.c ****       case HV_UNOP_COSH: f = hv_cosh_f(f); break;
 303              		.loc 1 26 29 is_stmt 0 view .LVU80
 304 00ae B0EE670A 		vmov.f32	s0, s15
 305 00b2 FFF7FEFF 		bl	cosf
 306              	.LVL29:
  26:source/HvControlUnop.c ****       case HV_UNOP_COSH: f = hv_cosh_f(f); break;
 307              		.loc 1 26 42 is_stmt 1 view .LVU81
  26:source/HvControlUnop.c ****       case HV_UNOP_COSH: f = hv_cosh_f(f); break;
 308              		.loc 1 26 7 is_stmt 0 view .LVU82
 309 00b6 C4E7     		b	.L5
 310              	.LVL30:
 311              	.L8:
  27:source/HvControlUnop.c ****       case HV_UNOP_TAN: f = hv_tan_f(f); break;
 312              		.loc 1 27 26 is_stmt 1 view .LVU83
  27:source/HvControlUnop.c ****       case HV_UNOP_TAN: f = hv_tan_f(f); break;
 313              		.loc 1 27 30 is_stmt 0 view .LVU84
 314 00b8 B0EE670A 		vmov.f32	s0, s15
 315 00bc FFF7FEFF 		bl	coshf
 316              	.LVL31:
  27:source/HvControlUnop.c ****       case HV_UNOP_TAN: f = hv_tan_f(f); break;
 317              		.loc 1 27 44 is_stmt 1 view .LVU85
  27:source/HvControlUnop.c ****       case HV_UNOP_TAN: f = hv_tan_f(f); break;
 318              		.loc 1 27 7 is_stmt 0 view .LVU86
 319 00c0 BFE7     		b	.L5
 320              	.LVL32:
 321              	.L9:
  28:source/HvControlUnop.c ****       case HV_UNOP_TANH: f = hv_tanh_f(f); break;
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccRoi8TA.s 			page 11


 322              		.loc 1 28 25 is_stmt 1 view .LVU87
  28:source/HvControlUnop.c ****       case HV_UNOP_TANH: f = hv_tanh_f(f); break;
 323              		.loc 1 28 29 is_stmt 0 view .LVU88
 324 00c2 B0EE670A 		vmov.f32	s0, s15
 325 00c6 FFF7FEFF 		bl	tanf
 326              	.LVL33:
  28:source/HvControlUnop.c ****       case HV_UNOP_TANH: f = hv_tanh_f(f); break;
 327              		.loc 1 28 42 is_stmt 1 view .LVU89
  28:source/HvControlUnop.c ****       case HV_UNOP_TANH: f = hv_tanh_f(f); break;
 328              		.loc 1 28 7 is_stmt 0 view .LVU90
 329 00ca BAE7     		b	.L5
 330              	.LVL34:
 331              	.L10:
  29:source/HvControlUnop.c ****       case HV_UNOP_ASIN: f = hv_asin_f(f); break;
 332              		.loc 1 29 26 is_stmt 1 view .LVU91
  29:source/HvControlUnop.c ****       case HV_UNOP_ASIN: f = hv_asin_f(f); break;
 333              		.loc 1 29 30 is_stmt 0 view .LVU92
 334 00cc B0EE670A 		vmov.f32	s0, s15
 335 00d0 FFF7FEFF 		bl	tanhf
 336              	.LVL35:
  29:source/HvControlUnop.c ****       case HV_UNOP_ASIN: f = hv_asin_f(f); break;
 337              		.loc 1 29 44 is_stmt 1 view .LVU93
  29:source/HvControlUnop.c ****       case HV_UNOP_ASIN: f = hv_asin_f(f); break;
 338              		.loc 1 29 7 is_stmt 0 view .LVU94
 339 00d4 B5E7     		b	.L5
 340              	.LVL36:
 341              	.L17:
  36:source/HvControlUnop.c ****       case HV_UNOP_ABS: f = hv_abs_f(f); break;
 342              		.loc 1 36 25 is_stmt 1 view .LVU95
  36:source/HvControlUnop.c ****       case HV_UNOP_ABS: f = hv_abs_f(f); break;
 343              		.loc 1 36 29 is_stmt 0 view .LVU96
 344 00d6 B0EE670A 		vmov.f32	s0, s15
 345 00da FFF7FEFF 		bl	expf
 346              	.LVL37:
  36:source/HvControlUnop.c ****       case HV_UNOP_ABS: f = hv_abs_f(f); break;
 347              		.loc 1 36 42 is_stmt 1 view .LVU97
  36:source/HvControlUnop.c ****       case HV_UNOP_ABS: f = hv_abs_f(f); break;
 348              		.loc 1 36 7 is_stmt 0 view .LVU98
 349 00de B0E7     		b	.L5
 350              	.LVL38:
 351              	.L18:
  37:source/HvControlUnop.c ****       case HV_UNOP_SQRT: f = (f > 0.0f) ? hv_sqrt_f(f) : 0.0f; break;
 352              		.loc 1 37 25 is_stmt 1 view .LVU99
  37:source/HvControlUnop.c ****       case HV_UNOP_SQRT: f = (f > 0.0f) ? hv_sqrt_f(f) : 0.0f; break;
 353              		.loc 1 37 27 is_stmt 0 view .LVU100
 354 00e0 B0EEE70A 		vabs.f32	s0, s15
 355              	.LVL39:
  37:source/HvControlUnop.c ****       case HV_UNOP_SQRT: f = (f > 0.0f) ? hv_sqrt_f(f) : 0.0f; break;
 356              		.loc 1 37 42 is_stmt 1 view .LVU101
  37:source/HvControlUnop.c ****       case HV_UNOP_SQRT: f = (f > 0.0f) ? hv_sqrt_f(f) : 0.0f; break;
 357              		.loc 1 37 7 is_stmt 0 view .LVU102
 358 00e4 ADE7     		b	.L5
 359              	.LVL40:
 360              	.L19:
  38:source/HvControlUnop.c ****       case HV_UNOP_LOG: f = (f > 0.0f) ? hv_log_f(f) : 0.0f; break;
 361              		.loc 1 38 26 is_stmt 1 view .LVU103
  38:source/HvControlUnop.c ****       case HV_UNOP_LOG: f = (f > 0.0f) ? hv_log_f(f) : 0.0f; break;
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccRoi8TA.s 			page 12


 362              		.loc 1 38 56 is_stmt 0 view .LVU104
 363 00e6 F5EEC07A 		vcmpe.f32	s15, #0
 364 00ea F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 365 00ee 2EDC     		bgt	.L53
 366              	.L49:
  38:source/HvControlUnop.c ****       case HV_UNOP_LOG: f = (f > 0.0f) ? hv_log_f(f) : 0.0f; break;
 367              		.loc 1 38 56 view .LVU105
 368 00f0 9FED1D0A 		vldr.32	s0, .L54
 369 00f4 A5E7     		b	.L5
 370              	.L23:
  39:source/HvControlUnop.c ****       case HV_UNOP_LOG2: f = (f > 0.0f) ? (1.442695040888963f*hv_log_f(f)) : 0.0f; break;
 371              		.loc 1 39 25 is_stmt 1 view .LVU106
  39:source/HvControlUnop.c ****       case HV_UNOP_LOG2: f = (f > 0.0f) ? (1.442695040888963f*hv_log_f(f)) : 0.0f; break;
 372              		.loc 1 39 54 is_stmt 0 view .LVU107
 373 00f6 F5EEC07A 		vcmpe.f32	s15, #0
 374 00fa F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 375 00fe F7DD     		ble	.L49
  39:source/HvControlUnop.c ****       case HV_UNOP_LOG2: f = (f > 0.0f) ? (1.442695040888963f*hv_log_f(f)) : 0.0f; break;
 376              		.loc 1 39 42 discriminator 1 view .LVU108
 377 0100 B0EE670A 		vmov.f32	s0, s15
 378 0104 FFF7FEFF 		bl	logf
 379              	.LVL41:
  39:source/HvControlUnop.c ****       case HV_UNOP_LOG2: f = (f > 0.0f) ? (1.442695040888963f*hv_log_f(f)) : 0.0f; break;
 380              		.loc 1 39 42 discriminator 1 view .LVU109
 381 0108 9BE7     		b	.L5
 382              	.LVL42:
 383              	.L25:
  40:source/HvControlUnop.c ****       case HV_UNOP_LOG10: f = (f > 0.0f) ? (0.434294481903252f*hv_log_f(f)) : 0.0f; break;
 384              		.loc 1 40 26 is_stmt 1 view .LVU110
  40:source/HvControlUnop.c ****       case HV_UNOP_LOG10: f = (f > 0.0f) ? (0.434294481903252f*hv_log_f(f)) : 0.0f; break;
 385              		.loc 1 40 76 is_stmt 0 view .LVU111
 386 010a F5EEC07A 		vcmpe.f32	s15, #0
 387 010e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 388 0112 EDDD     		ble	.L49
  40:source/HvControlUnop.c ****       case HV_UNOP_LOG10: f = (f > 0.0f) ? (0.434294481903252f*hv_log_f(f)) : 0.0f; break;
 389              		.loc 1 40 63 discriminator 1 view .LVU112
 390 0114 B0EE670A 		vmov.f32	s0, s15
 391 0118 FFF7FEFF 		bl	logf
 392              	.LVL43:
  40:source/HvControlUnop.c ****       case HV_UNOP_LOG10: f = (f > 0.0f) ? (0.434294481903252f*hv_log_f(f)) : 0.0f; break;
 393              		.loc 1 40 76 discriminator 1 view .LVU113
 394 011c DFED137A 		vldr.32	s15, .L54+4
 395 0120 20EE270A 		vmul.f32	s0, s0, s15
 396 0124 8DE7     		b	.L5
 397              	.LVL44:
 398              	.L27:
  41:source/HvControlUnop.c ****       case HV_UNOP_CEIL: f = hv_ceil_f(f); break;
 399              		.loc 1 41 27 is_stmt 1 view .LVU114
  41:source/HvControlUnop.c ****       case HV_UNOP_CEIL: f = hv_ceil_f(f); break;
 400              		.loc 1 41 77 is_stmt 0 view .LVU115
 401 0126 F5EEC07A 		vcmpe.f32	s15, #0
 402 012a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 403 012e DFDD     		ble	.L49
  41:source/HvControlUnop.c ****       case HV_UNOP_CEIL: f = hv_ceil_f(f); break;
 404              		.loc 1 41 64 discriminator 1 view .LVU116
 405 0130 B0EE670A 		vmov.f32	s0, s15
 406 0134 FFF7FEFF 		bl	logf
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccRoi8TA.s 			page 13


 407              	.LVL45:
  41:source/HvControlUnop.c ****       case HV_UNOP_CEIL: f = hv_ceil_f(f); break;
 408              		.loc 1 41 77 discriminator 1 view .LVU117
 409 0138 DFED0D7A 		vldr.32	s15, .L54+8
 410 013c 20EE270A 		vmul.f32	s0, s0, s15
 411 0140 7FE7     		b	.L5
 412              	.LVL46:
 413              	.L29:
  42:source/HvControlUnop.c ****       case HV_UNOP_FLOOR: f = hv_floor_f(f); break;
 414              		.loc 1 42 26 is_stmt 1 view .LVU118
  42:source/HvControlUnop.c ****       case HV_UNOP_FLOOR: f = hv_floor_f(f); break;
 415              		.loc 1 42 30 is_stmt 0 view .LVU119
 416 0142 BAFE670A 		vrintp.f32	s0, s15
 417              	.LVL47:
  42:source/HvControlUnop.c ****       case HV_UNOP_FLOOR: f = hv_floor_f(f); break;
 418              		.loc 1 42 44 is_stmt 1 view .LVU120
  42:source/HvControlUnop.c ****       case HV_UNOP_FLOOR: f = hv_floor_f(f); break;
 419              		.loc 1 42 7 is_stmt 0 view .LVU121
 420 0146 7CE7     		b	.L5
 421              	.LVL48:
 422              	.L30:
  43:source/HvControlUnop.c ****       case HV_UNOP_ROUND: f = hv_round_f(f); break;
 423              		.loc 1 43 27 is_stmt 1 view .LVU122
  43:source/HvControlUnop.c ****       case HV_UNOP_ROUND: f = hv_round_f(f); break;
 424              		.loc 1 43 31 is_stmt 0 view .LVU123
 425 0148 BBFE670A 		vrintm.f32	s0, s15
 426              	.LVL49:
  43:source/HvControlUnop.c ****       case HV_UNOP_ROUND: f = hv_round_f(f); break;
 427              		.loc 1 43 46 is_stmt 1 view .LVU124
  43:source/HvControlUnop.c ****       case HV_UNOP_ROUND: f = hv_round_f(f); break;
 428              		.loc 1 43 7 is_stmt 0 view .LVU125
 429 014c 79E7     		b	.L5
 430              	.LVL50:
 431              	.L53:
  43:source/HvControlUnop.c ****       case HV_UNOP_ROUND: f = hv_round_f(f); break;
 432              		.loc 1 43 7 view .LVU126
 433 014e F5EE407A 		vcmp.f32	s15, #0
 434 0152 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 435 0156 02D4     		bmi	.L46
  38:source/HvControlUnop.c ****       case HV_UNOP_LOG: f = (f > 0.0f) ? hv_log_f(f) : 0.0f; break;
 436              		.loc 1 38 43 view .LVU127
 437 0158 B1EEE70A 		vsqrt.f32	s0, s15
 438 015c 71E7     		b	.L5
 439              	.L46:
  38:source/HvControlUnop.c ****       case HV_UNOP_LOG: f = (f > 0.0f) ? hv_log_f(f) : 0.0f; break;
 440              		.loc 1 38 43 discriminator 1 view .LVU128
 441 015e B0EE670A 		vmov.f32	s0, s15
 442 0162 FFF7FEFF 		bl	sqrtf
 443              	.LVL51:
  38:source/HvControlUnop.c ****       case HV_UNOP_LOG: f = (f > 0.0f) ? hv_log_f(f) : 0.0f; break;
 444              		.loc 1 38 43 discriminator 1 view .LVU129
 445 0166 6CE7     		b	.L5
 446              	.L55:
 447              		.align	2
 448              	.L54:
 449 0168 00000000 		.word	0
 450 016c 3BAAB83F 		.word	1069066811
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccRoi8TA.s 			page 14


 451 0170 D95BDE3E 		.word	1054759897
 452              	.LBE53:
 453              		.cfi_endproc
 454              	.LFE399:
 456              		.text
 457              	.Letext0:
 458              		.file 3 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/machine/_default_types.h"
 459              		.file 4 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/_stdint.h"
 460              		.file 5 "/Library/DaisyToolchain/0.2.0/arm/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 461              		.file 6 "source/HvHeavy.h"
 462              		.file 7 "source/HvControlUnop.h"
 463              		.file 8 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/math.h"
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccRoi8TA.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 HvControlUnop.c
/var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccRoi8TA.s:19     .text.cUnop_onMessage:0000000000000000 $t
/var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccRoi8TA.s:26     .text.cUnop_onMessage:0000000000000000 cUnop_onMessage
/var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccRoi8TA.s:154    .text.cUnop_onMessage:0000000000000028 $d
/var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccRoi8TA.s:449    .text.cUnop_onMessage:0000000000000168 $d
/var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccRoi8TA.s:175    .text.cUnop_onMessage:000000000000003d $d
/var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccRoi8TA.s:175    .text.cUnop_onMessage:000000000000003e $t

UNDEFINED SYMBOLS
msg_initWithFloat
asinf
asinhf
acosf
acoshf
atanf
atanhf
sinf
sinhf
cosf
coshf
tanf
tanhf
expf
logf
sqrtf
