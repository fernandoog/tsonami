ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 2
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"HvSignalPhasor.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.rodata.msg_getFloat.part.0.str1.4,"aMS",%progbits,1
  19              		.align	2
  20              	.LC0:
  21 0000 696E6465 		.ascii	"index < msg_getNumElements(m)\000"
  21      78203C20 
  21      6D73675F 
  21      6765744E 
  21      756D456C 
  22 001e 0000     		.align	2
  23              	.LC1:
  24 0020 736F7572 		.ascii	"source/HvMessage.h\000"
  24      63652F48 
  24      764D6573 
  24      73616765 
  24      2E6800
  25              		.section	.text.msg_getFloat.part.0,"ax",%progbits
  26              		.align	1
  27              		.p2align 2,,3
  28              		.syntax unified
  29              		.thumb
  30              		.thumb_func
  32              	msg_getFloat.part.0:
  33              	.LFB408:
  34              		.file 1 "source/HvMessage.h"
   1:source/HvMessage.h **** /**
   2:source/HvMessage.h ****  * Copyright (c) 2014-2018 Enzien Audio Ltd.
   3:source/HvMessage.h ****  *
   4:source/HvMessage.h ****  * Permission to use, copy, modify, and/or distribute this software for any
   5:source/HvMessage.h ****  * purpose with or without fee is hereby granted, provided that the above
   6:source/HvMessage.h ****  * copyright notice and this permission notice appear in all copies.
   7:source/HvMessage.h ****  *
   8:source/HvMessage.h ****  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
   9:source/HvMessage.h ****  * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  10:source/HvMessage.h ****  * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  11:source/HvMessage.h ****  * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  12:source/HvMessage.h ****  * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  13:source/HvMessage.h ****  * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  14:source/HvMessage.h ****  * PERFORMANCE OF THIS SOFTWARE.
  15:source/HvMessage.h ****  */
  16:source/HvMessage.h **** 
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s 			page 2


  17:source/HvMessage.h **** #ifndef _HEAVY_MESSAGE_H_
  18:source/HvMessage.h **** #define _HEAVY_MESSAGE_H_
  19:source/HvMessage.h **** 
  20:source/HvMessage.h **** #include "HvUtils.h"
  21:source/HvMessage.h **** 
  22:source/HvMessage.h **** #ifdef __cplusplus
  23:source/HvMessage.h **** extern "C" {
  24:source/HvMessage.h **** #endif
  25:source/HvMessage.h **** 
  26:source/HvMessage.h **** typedef enum ElementType {
  27:source/HvMessage.h ****   HV_MSG_BANG = 0,
  28:source/HvMessage.h ****   HV_MSG_FLOAT = 1,
  29:source/HvMessage.h ****   HV_MSG_SYMBOL = 2,
  30:source/HvMessage.h ****   HV_MSG_HASH = 3
  31:source/HvMessage.h **** } ElementType;
  32:source/HvMessage.h **** 
  33:source/HvMessage.h **** typedef struct Element {
  34:source/HvMessage.h ****   ElementType type;
  35:source/HvMessage.h ****   union {
  36:source/HvMessage.h ****     float f; // float
  37:source/HvMessage.h ****     const char *s; // symbol
  38:source/HvMessage.h ****     hv_uint32_t h; // hash
  39:source/HvMessage.h ****   } data;
  40:source/HvMessage.h **** } Element;
  41:source/HvMessage.h **** 
  42:source/HvMessage.h **** typedef struct HvMessage {
  43:source/HvMessage.h ****   hv_uint32_t timestamp; // the sample at which this message should be processed
  44:source/HvMessage.h ****   hv_uint16_t numElements;
  45:source/HvMessage.h ****   hv_uint16_t numBytes; // the total number of bytes that this message occupies in memory, includin
  46:source/HvMessage.h ****   Element elem;
  47:source/HvMessage.h **** } HvMessage;
  48:source/HvMessage.h **** 
  49:source/HvMessage.h **** typedef struct ReceiverMessagePair {
  50:source/HvMessage.h ****   hv_uint32_t receiverHash;
  51:source/HvMessage.h ****   HvMessage msg;
  52:source/HvMessage.h **** } ReceiverMessagePair;
  53:source/HvMessage.h **** 
  54:source/HvMessage.h **** #define HV_MESSAGE_ON_STACK(_x) (HvMessage *) hv_alloca(msg_getCoreSize(_x))
  55:source/HvMessage.h **** 
  56:source/HvMessage.h **** /** Returns the number of bytes that this message consumes in memory, not including strings. */
  57:source/HvMessage.h **** static inline hv_size_t msg_getCoreSize(hv_size_t numElements) {
  58:source/HvMessage.h ****   hv_assert(numElements > 0);
  59:source/HvMessage.h ****   return sizeof(HvMessage) + ((numElements-1) * sizeof(Element));
  60:source/HvMessage.h **** }
  61:source/HvMessage.h **** 
  62:source/HvMessage.h **** HvMessage *msg_copy(const HvMessage *m);
  63:source/HvMessage.h **** 
  64:source/HvMessage.h **** /** Copies the message into the given buffer. The buffer must be at least as large as msg_getNumHea
  65:source/HvMessage.h **** void msg_copyToBuffer(const HvMessage *m, char *buffer, hv_size_t len);
  66:source/HvMessage.h **** 
  67:source/HvMessage.h **** void msg_setElementToFrom(HvMessage *n, int indexN, const HvMessage *const m, int indexM);
  68:source/HvMessage.h **** 
  69:source/HvMessage.h **** /** Frees a message on the heap. Does nothing if argument is NULL. */
  70:source/HvMessage.h **** void msg_free(HvMessage *m);
  71:source/HvMessage.h **** 
  72:source/HvMessage.h **** HvMessage *msg_init(HvMessage *m, hv_size_t numElements, hv_uint32_t timestamp);
  73:source/HvMessage.h **** 
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s 			page 3


  74:source/HvMessage.h **** HvMessage *msg_initWithFloat(HvMessage *m, hv_uint32_t timestamp, float f);
  75:source/HvMessage.h **** 
  76:source/HvMessage.h **** HvMessage *msg_initWithBang(HvMessage *m, hv_uint32_t timestamp);
  77:source/HvMessage.h **** 
  78:source/HvMessage.h **** HvMessage *msg_initWithSymbol(HvMessage *m, hv_uint32_t timestamp, const char *s);
  79:source/HvMessage.h **** 
  80:source/HvMessage.h **** HvMessage *msg_initWithHash(HvMessage *m, hv_uint32_t timestamp, hv_uint32_t h);
  81:source/HvMessage.h **** 
  82:source/HvMessage.h **** static inline hv_uint32_t msg_getTimestamp(const HvMessage *m) {
  83:source/HvMessage.h ****   return m->timestamp;
  84:source/HvMessage.h **** }
  85:source/HvMessage.h **** 
  86:source/HvMessage.h **** static inline void msg_setTimestamp(HvMessage *m, hv_uint32_t timestamp) {
  87:source/HvMessage.h ****   m->timestamp = timestamp;
  88:source/HvMessage.h **** }
  89:source/HvMessage.h **** 
  90:source/HvMessage.h **** static inline int msg_getNumElements(const HvMessage *m) {
  91:source/HvMessage.h ****   return (int) m->numElements;
  92:source/HvMessage.h **** }
  93:source/HvMessage.h **** 
  94:source/HvMessage.h **** /** Returns the total number of bytes this message consumes in memory. */
  95:source/HvMessage.h **** static inline hv_uint32_t msg_getSize(const HvMessage *m) {
  96:source/HvMessage.h ****   return m->numBytes;
  97:source/HvMessage.h **** }
  98:source/HvMessage.h **** 
  99:source/HvMessage.h **** static inline ElementType msg_getType(const HvMessage *m, int index) {
 100:source/HvMessage.h ****   hv_assert(index < msg_getNumElements(m)); // invalid index
 101:source/HvMessage.h ****   return (&(m->elem)+index)->type;
 102:source/HvMessage.h **** }
 103:source/HvMessage.h **** 
 104:source/HvMessage.h **** static inline void msg_setBang(HvMessage *m, int index) {
 105:source/HvMessage.h ****   hv_assert(index < msg_getNumElements(m)); // invalid index
 106:source/HvMessage.h ****   (&(m->elem)+index)->type = HV_MSG_BANG;
 107:source/HvMessage.h ****   (&(m->elem)+index)->data.s = NULL;
 108:source/HvMessage.h **** }
 109:source/HvMessage.h **** 
 110:source/HvMessage.h **** static inline bool msg_isBang(const HvMessage *m, int index) {
 111:source/HvMessage.h ****   return (index < msg_getNumElements(m)) ? (msg_getType(m,index) == HV_MSG_BANG) : false;
 112:source/HvMessage.h **** }
 113:source/HvMessage.h **** 
 114:source/HvMessage.h **** static inline void msg_setFloat(HvMessage *m, int index, float f) {
 115:source/HvMessage.h ****   hv_assert(index < msg_getNumElements(m)); // invalid index
 116:source/HvMessage.h ****   (&(m->elem)+index)->type = HV_MSG_FLOAT;
 117:source/HvMessage.h ****   (&(m->elem)+index)->data.f = f;
 118:source/HvMessage.h **** }
 119:source/HvMessage.h **** 
 120:source/HvMessage.h **** static inline float msg_getFloat(const HvMessage *const m, int index) {
  35              		.loc 1 120 21 view -0
  36              		.cfi_startproc
  37              		@ Volatile: function does not return.
  38              		@ args = 0, pretend = 0, frame = 0
  39              		@ frame_needed = 0, uses_anonymous_args = 0
  40              	.LVL0:
  41              		.loc 1 120 21 is_stmt 0 view .LVU1
  42 0000 08B5     		push	{r3, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 3, -8
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s 			page 4


  45              		.cfi_offset 14, -4
 121:source/HvMessage.h ****   hv_assert(index < msg_getNumElements(m)); // invalid index
  46              		.loc 1 121 3 view .LVU2
  47 0002 034A     		ldr	r2, .L4
  48 0004 7921     		movs	r1, #121
  49 0006 034B     		ldr	r3, .L4+4
  50 0008 0348     		ldr	r0, .L4+8
  51 000a FFF7FEFF 		bl	__assert_func
  52              	.LVL1:
  53              	.L5:
  54 000e 00BF     		.align	2
  55              	.L4:
  56 0010 00000000 		.word	.LANCHOR0
  57 0014 00000000 		.word	.LC0
  58 0018 20000000 		.word	.LC1
  59              		.cfi_endproc
  60              	.LFE408:
  62              		.section	.text.sPhasor_init,"ax",%progbits
  63              		.align	1
  64              		.p2align 2,,3
  65              		.global	sPhasor_init
  66              		.syntax unified
  67              		.thumb
  68              		.thumb_func
  70              	sPhasor_init:
  71              	.LVL2:
  72              	.LFB404:
  73              		.file 2 "source/HvSignalPhasor.c"
   1:source/HvSignalPhasor.c **** /**
   2:source/HvSignalPhasor.c ****  * Copyright (c) 2014-2018 Enzien Audio Ltd.
   3:source/HvSignalPhasor.c ****  *
   4:source/HvSignalPhasor.c ****  * Permission to use, copy, modify, and/or distribute this software for any
   5:source/HvSignalPhasor.c ****  * purpose with or without fee is hereby granted, provided that the above
   6:source/HvSignalPhasor.c ****  * copyright notice and this permission notice appear in all copies.
   7:source/HvSignalPhasor.c ****  *
   8:source/HvSignalPhasor.c ****  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
   9:source/HvSignalPhasor.c ****  * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  10:source/HvSignalPhasor.c ****  * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  11:source/HvSignalPhasor.c ****  * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  12:source/HvSignalPhasor.c ****  * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  13:source/HvSignalPhasor.c ****  * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  14:source/HvSignalPhasor.c ****  * PERFORMANCE OF THIS SOFTWARE.
  15:source/HvSignalPhasor.c ****  */
  16:source/HvSignalPhasor.c **** 
  17:source/HvSignalPhasor.c **** #include "HvSignalPhasor.h"
  18:source/HvSignalPhasor.c **** 
  19:source/HvSignalPhasor.c **** #define HV_PHASOR_2_32 4294967296.0
  20:source/HvSignalPhasor.c **** 
  21:source/HvSignalPhasor.c **** #if HV_SIMD_AVX
  22:source/HvSignalPhasor.c **** static void sPhasor_updatePhase(SignalPhasor *o, float p) {
  23:source/HvSignalPhasor.c ****   o->phase = _mm256_set1_ps(p+1.0f); // o->phase is in range [1,2]
  24:source/HvSignalPhasor.c **** #elif HV_SIMD_SSE
  25:source/HvSignalPhasor.c ****   static void sPhasor_updatePhase(SignalPhasor *o, hv_uint32_t p) {
  26:source/HvSignalPhasor.c ****     o->phase = _mm_set1_epi32(p);
  27:source/HvSignalPhasor.c **** #elif HV_SIMD_NEON
  28:source/HvSignalPhasor.c ****   static void sPhasor_updatePhase(SignalPhasor *o, hv_uint32_t p) {
  29:source/HvSignalPhasor.c ****     o->phase =  vdupq_n_u32(p);
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s 			page 5


  30:source/HvSignalPhasor.c **** #else // HV_SIMD_NONE
  31:source/HvSignalPhasor.c ****   static void sPhasor_updatePhase(SignalPhasor *o, hv_uint32_t p) {
  32:source/HvSignalPhasor.c ****     o->phase = p;
  33:source/HvSignalPhasor.c **** #endif
  34:source/HvSignalPhasor.c **** }
  35:source/HvSignalPhasor.c **** 
  36:source/HvSignalPhasor.c **** // input phase is in the range of [0,1]. It is independent of o->phase.
  37:source/HvSignalPhasor.c **** #if HV_SIMD_AVX
  38:source/HvSignalPhasor.c **** static void sPhasor_k_updatePhase(SignalPhasor *o, float p) {
  39:source/HvSignalPhasor.c ****   o->phase = _mm256_set_ps(
  40:source/HvSignalPhasor.c ****       p+1.0f+7.0f*o->step.f2sc, p+1.0f+6.0f*o->step.f2sc,
  41:source/HvSignalPhasor.c ****       p+1.0f+5.0f*o->step.f2sc, p+1.0f+4.0f*o->step.f2sc,
  42:source/HvSignalPhasor.c ****       p+1.0f+3.0f*o->step.f2sc, p+1.0f+2.0f*o->step.f2sc,
  43:source/HvSignalPhasor.c ****       p+1.0f+o->step.f2sc,      p+1.0f);
  44:source/HvSignalPhasor.c **** 
  45:source/HvSignalPhasor.c ****   // ensure that o->phase is still in range [1,2]
  46:source/HvSignalPhasor.c ****   o->phase = _mm256_or_ps(_mm256_andnot_ps(
  47:source/HvSignalPhasor.c ****       _mm256_set1_ps(-INFINITY), o->phase), _mm256_set1_ps(1.0f));
  48:source/HvSignalPhasor.c **** #elif HV_SIMD_SSE
  49:source/HvSignalPhasor.c **** static void sPhasor_k_updatePhase(SignalPhasor *o, hv_uint32_t p) {
  50:source/HvSignalPhasor.c ****   o->phase = _mm_set_epi32(3*o->step.s+p, 2*o->step.s+p, o->step.s+p, p);
  51:source/HvSignalPhasor.c **** #elif HV_SIMD_NEON
  52:source/HvSignalPhasor.c **** static void sPhasor_k_updatePhase(SignalPhasor *o, hv_uint32_t p) {
  53:source/HvSignalPhasor.c ****   o->phase = (uint32x4_t) {p, o->step.s+p, 2*o->step.s+p, 3*o->step.s+p};
  54:source/HvSignalPhasor.c **** #else // HV_SIMD_NONE
  55:source/HvSignalPhasor.c **** static void sPhasor_k_updatePhase(SignalPhasor *o, hv_uint32_t p) {
  56:source/HvSignalPhasor.c ****   o->phase = p;
  57:source/HvSignalPhasor.c **** #endif
  58:source/HvSignalPhasor.c **** }
  59:source/HvSignalPhasor.c **** 
  60:source/HvSignalPhasor.c **** static void sPhasor_k_updateFrequency(SignalPhasor *o, float f, double r) {
  61:source/HvSignalPhasor.c **** #if HV_SIMD_AVX
  62:source/HvSignalPhasor.c ****   o->step.f2sc = (float) (f/r);
  63:source/HvSignalPhasor.c ****   o->inc = _mm256_set1_ps((float) (8.0f*f/r));
  64:source/HvSignalPhasor.c ****   sPhasor_k_updatePhase(o, o->phase[0]);
  65:source/HvSignalPhasor.c **** #elif HV_SIMD_SSE
  66:source/HvSignalPhasor.c ****   o->step.s = (hv_int32_t) (f*(HV_PHASOR_2_32/r));
  67:source/HvSignalPhasor.c ****   o->inc = _mm_set1_epi32(4*o->step.s);
  68:source/HvSignalPhasor.c ****   const hv_uint32_t *const p = (hv_uint32_t *) &o->phase;
  69:source/HvSignalPhasor.c ****   sPhasor_k_updatePhase(o, p[0]);
  70:source/HvSignalPhasor.c **** #elif HV_SIMD_NEON
  71:source/HvSignalPhasor.c ****   o->step.s = (hv_int32_t) (f*(HV_PHASOR_2_32/r));
  72:source/HvSignalPhasor.c ****   o->inc = vdupq_n_s32(4*o->step.s);
  73:source/HvSignalPhasor.c ****   sPhasor_k_updatePhase(o, vgetq_lane_u32(o->phase, 0));
  74:source/HvSignalPhasor.c **** #else // HV_SIMD_NONE
  75:source/HvSignalPhasor.c ****   o->step.s = (hv_int32_t) (f*(HV_PHASOR_2_32/r));
  76:source/HvSignalPhasor.c ****   o->inc = o->step.s;
  77:source/HvSignalPhasor.c ****   // no need to update phase
  78:source/HvSignalPhasor.c **** #endif
  79:source/HvSignalPhasor.c **** }
  80:source/HvSignalPhasor.c **** 
  81:source/HvSignalPhasor.c **** hv_size_t sPhasor_init(SignalPhasor *o, double samplerate) {
  74              		.loc 2 81 60 is_stmt 1 view -0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78              		@ link register save eliminated.
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s 			page 6


  82:source/HvSignalPhasor.c **** #if HV_SIMD_AVX
  83:source/HvSignalPhasor.c ****   o->phase = _mm256_set1_ps(1.0f);
  84:source/HvSignalPhasor.c ****   o->inc = _mm256_setzero_ps();
  85:source/HvSignalPhasor.c ****   o->step.f2sc = (float) (1.0/samplerate);
  86:source/HvSignalPhasor.c **** #elif HV_SIMD_SSE
  87:source/HvSignalPhasor.c ****   o->phase = _mm_setzero_si128();
  88:source/HvSignalPhasor.c ****   o->inc = _mm_setzero_si128();
  89:source/HvSignalPhasor.c ****   o->step.f2sc = (float) (HV_PHASOR_2_32/samplerate);
  90:source/HvSignalPhasor.c **** #elif HV_SIMD_NEON
  91:source/HvSignalPhasor.c ****   o->phase = vdupq_n_u32(0);
  92:source/HvSignalPhasor.c ****   o->inc = vdupq_n_s32(0);
  93:source/HvSignalPhasor.c ****   o->step.f2sc = (float) (HV_PHASOR_2_32/samplerate);
  94:source/HvSignalPhasor.c **** #else // HV_SIMD_NONE
  95:source/HvSignalPhasor.c ****   o->phase = 0;
  79              		.loc 2 95 3 view .LVU4
  96:source/HvSignalPhasor.c ****   o->inc = 0;
  97:source/HvSignalPhasor.c ****   o->step.f2sc = (float) (HV_PHASOR_2_32/samplerate);
  80              		.loc 2 97 41 is_stmt 0 view .LVU5
  81 0000 9FED076B 		vldr.64	d6, .L7
  81:source/HvSignalPhasor.c **** #if HV_SIMD_AVX
  82              		.loc 2 81 60 view .LVU6
  83 0004 0346     		mov	r3, r0
  95:source/HvSignalPhasor.c ****   o->inc = 0;
  84              		.loc 2 95 12 view .LVU7
  85 0006 0022     		movs	r2, #0
  86              		.loc 2 97 41 view .LVU8
  87 0008 86EE007B 		vdiv.f64	d7, d6, d0
  98:source/HvSignalPhasor.c **** #endif
  99:source/HvSignalPhasor.c ****   return 0;
 100:source/HvSignalPhasor.c **** }
  88              		.loc 2 100 1 view .LVU9
  89 000c 1046     		mov	r0, r2
  90              	.LVL3:
  96:source/HvSignalPhasor.c ****   o->step.f2sc = (float) (HV_PHASOR_2_32/samplerate);
  91              		.loc 2 96 10 view .LVU10
  92 000e C3E90022 		strd	r2, r2, [r3]
  97:source/HvSignalPhasor.c **** #endif
  93              		.loc 2 97 3 is_stmt 1 view .LVU11
  97:source/HvSignalPhasor.c **** #endif
  94              		.loc 2 97 18 is_stmt 0 view .LVU12
  95 0012 B7EEC77B 		vcvt.f32.f64	s14, d7
  96 0016 83ED027A 		vstr.32	s14, [r3, #8]
  99:source/HvSignalPhasor.c **** }
  97              		.loc 2 99 3 is_stmt 1 view .LVU13
  98              		.loc 2 100 1 is_stmt 0 view .LVU14
  99 001a 7047     		bx	lr
 100              	.L8:
 101 001c AFF30080 		.align	3
 102              	.L7:
 103 0020 00000000 		.word	0
 104 0024 0000F041 		.word	1106247680
 105              		.cfi_endproc
 106              	.LFE404:
 108              		.section	.text.sPhasor_onMessage,"ax",%progbits
 109              		.align	1
 110              		.p2align 2,,3
 111              		.global	sPhasor_onMessage
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s 			page 7


 112              		.syntax unified
 113              		.thumb
 114              		.thumb_func
 116              	sPhasor_onMessage:
 117              	.LVL4:
 118              	.LFB405:
 101:source/HvSignalPhasor.c **** 
 102:source/HvSignalPhasor.c **** void sPhasor_onMessage(HeavyContextInterface *_c, SignalPhasor *o, int letIn, const HvMessage *m) {
 119              		.loc 2 102 99 is_stmt 1 view -0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 0
 122              		@ frame_needed = 0, uses_anonymous_args = 0
 123              		@ link register save eliminated.
 103:source/HvSignalPhasor.c ****   if (letIn == 1) {
 124              		.loc 2 103 3 view .LVU16
 125              		.loc 2 103 6 is_stmt 0 view .LVU17
 126 0000 012A     		cmp	r2, #1
 127 0002 00D0     		beq	.L23
 128              	.LVL5:
 129              	.L9:
 104:source/HvSignalPhasor.c ****     if (msg_isFloat(m,0)) {
 105:source/HvSignalPhasor.c ****       float p = msg_getFloat(m,0);
 106:source/HvSignalPhasor.c ****       while (p < 0.0f) p += 1.0f; // wrap phase to [0,1]
 107:source/HvSignalPhasor.c ****       while (p > 1.0f) p -= 1.0f;
 108:source/HvSignalPhasor.c **** #if HV_SIMD_AVX
 109:source/HvSignalPhasor.c ****       sPhasor_updatePhase(o, p);
 110:source/HvSignalPhasor.c **** #else // HV_SIMD_SSE || HV_SIMD_NEON || HV_SIMD_NONE
 111:source/HvSignalPhasor.c ****       sPhasor_updatePhase(o, (hv_uint32_t) (p * HV_PHASOR_2_32));
 112:source/HvSignalPhasor.c **** #endif
 113:source/HvSignalPhasor.c ****     }
 114:source/HvSignalPhasor.c ****   }
 115:source/HvSignalPhasor.c **** }
 130              		.loc 2 115 1 view .LVU18
 131 0004 7047     		bx	lr
 132              	.LVL6:
 133              	.L23:
 104:source/HvSignalPhasor.c ****     if (msg_isFloat(m,0)) {
 134              		.loc 2 104 5 is_stmt 1 view .LVU19
 135              	.LBB53:
 136              	.LBI53:
 122:source/HvMessage.h ****   return (&(m->elem)+index)->data.f;
 123:source/HvMessage.h **** }
 124:source/HvMessage.h **** 
 125:source/HvMessage.h **** static inline bool msg_isFloat(const HvMessage *const m, int index) {
 137              		.loc 1 125 20 view .LVU20
 138              	.LBB54:
 126:source/HvMessage.h ****   return (index < msg_getNumElements(m)) ? (msg_getType(m,index) == HV_MSG_FLOAT) : false;
 139              		.loc 1 126 3 view .LVU21
 140              	.LBB55:
 141              	.LBI55:
  90:source/HvMessage.h ****   return (int) m->numElements;
 142              		.loc 1 90 19 view .LVU22
 143              	.LBB56:
  91:source/HvMessage.h **** }
 144              		.loc 1 91 3 view .LVU23
  91:source/HvMessage.h **** }
 145              		.loc 1 91 3 is_stmt 0 view .LVU24
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s 			page 8


 146              	.LBE56:
 147              	.LBE55:
 148              		.loc 1 126 83 view .LVU25
 149 0006 9A88     		ldrh	r2, [r3, #4]
 150              	.LVL7:
 151              		.loc 1 126 83 view .LVU26
 152 0008 002A     		cmp	r2, #0
 153 000a FBD0     		beq	.L9
 154              	.LVL8:
 155              	.LBB57:
 156              	.LBI57:
  99:source/HvMessage.h ****   hv_assert(index < msg_getNumElements(m)); // invalid index
 157              		.loc 1 99 27 is_stmt 1 view .LVU27
 158              	.LBB58:
 100:source/HvMessage.h ****   return (&(m->elem)+index)->type;
 159              		.loc 1 100 3 view .LVU28
 100:source/HvMessage.h ****   return (&(m->elem)+index)->type;
 160              		.loc 1 100 3 is_stmt 0 view .LVU29
 161              	.LBE58:
 162              	.LBE57:
 163              	.LBE54:
 164              	.LBE53:
  91:source/HvMessage.h **** }
 165              		.loc 1 91 3 is_stmt 1 view .LVU30
 166              	.LBB62:
 167              	.LBB61:
 168              	.LBB60:
 169              	.LBB59:
 101:source/HvMessage.h **** }
 170              		.loc 1 101 3 view .LVU31
 101:source/HvMessage.h **** }
 171              		.loc 1 101 3 is_stmt 0 view .LVU32
 172              	.LBE59:
 173              	.LBE60:
 174              		.loc 1 126 83 view .LVU33
 175 000c 1A7A     		ldrb	r2, [r3, #8]	@ zero_extendqisi2
 176 000e 012A     		cmp	r2, #1
 177 0010 F8D1     		bne	.L9
 178              	.LVL9:
 179              		.loc 1 126 83 view .LVU34
 180              	.LBE61:
 181              	.LBE62:
 182              	.LBB63:
 105:source/HvSignalPhasor.c ****       while (p < 0.0f) p += 1.0f; // wrap phase to [0,1]
 183              		.loc 2 105 7 is_stmt 1 view .LVU35
 184              	.LBB64:
 185              	.LBI64:
 120:source/HvMessage.h ****   hv_assert(index < msg_getNumElements(m)); // invalid index
 186              		.loc 1 120 21 view .LVU36
 187              	.LBB65:
 121:source/HvMessage.h ****   return (&(m->elem)+index)->data.f;
 188              		.loc 1 121 3 view .LVU37
 121:source/HvMessage.h ****   return (&(m->elem)+index)->data.f;
 189              		.loc 1 121 3 is_stmt 0 view .LVU38
 190              	.LBE65:
 191              	.LBE64:
 192              	.LBE63:
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s 			page 9


  91:source/HvMessage.h **** }
 193              		.loc 1 91 3 is_stmt 1 view .LVU39
 194              	.LBB70:
 195              	.LBB67:
 196              	.LBB66:
 122:source/HvMessage.h **** }
 197              		.loc 1 122 3 view .LVU40
 122:source/HvMessage.h **** }
 198              		.loc 1 122 34 is_stmt 0 view .LVU41
 199 0012 93ED037A 		vldr.32	s14, [r3, #12]
 200              	.LVL10:
 122:source/HvMessage.h **** }
 201              		.loc 1 122 34 view .LVU42
 202              	.LBE66:
 203              	.LBE67:
 106:source/HvSignalPhasor.c ****       while (p > 1.0f) p -= 1.0f;
 204              		.loc 2 106 7 is_stmt 1 view .LVU43
 106:source/HvSignalPhasor.c ****       while (p > 1.0f) p -= 1.0f;
 205              		.loc 2 106 13 view .LVU44
 206 0016 B5EEC07A 		vcmpe.f32	s14, #0
 207 001a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 208 001e 08D5     		bpl	.L16
 106:source/HvSignalPhasor.c ****       while (p > 1.0f) p -= 1.0f;
 209              		.loc 2 106 26 is_stmt 0 view .LVU45
 210 0020 F7EE007A 		vmov.f32	s15, #1.0e+0
 211              	.L12:
 106:source/HvSignalPhasor.c ****       while (p > 1.0f) p -= 1.0f;
 212              		.loc 2 106 24 is_stmt 1 discriminator 2 view .LVU46
 106:source/HvSignalPhasor.c ****       while (p > 1.0f) p -= 1.0f;
 213              		.loc 2 106 26 is_stmt 0 discriminator 2 view .LVU47
 214 0024 37EE277A 		vadd.f32	s14, s14, s15
 215              	.LVL11:
 106:source/HvSignalPhasor.c ****       while (p > 1.0f) p -= 1.0f;
 216              		.loc 2 106 13 is_stmt 1 discriminator 2 view .LVU48
 217 0028 B5EEC07A 		vcmpe.f32	s14, #0
 218 002c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 219 0030 F8D4     		bmi	.L12
 220              	.L16:
 107:source/HvSignalPhasor.c **** #if HV_SIMD_AVX
 221              		.loc 2 107 13 view .LVU49
 222 0032 F7EE007A 		vmov.f32	s15, #1.0e+0
 223 0036 B4EEE77A 		vcmpe.f32	s14, s15
 224 003a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 225 003e 06DD     		ble	.L13
 226              	.L15:
 107:source/HvSignalPhasor.c **** #if HV_SIMD_AVX
 227              		.loc 2 107 24 discriminator 2 view .LVU50
 107:source/HvSignalPhasor.c **** #if HV_SIMD_AVX
 228              		.loc 2 107 26 is_stmt 0 discriminator 2 view .LVU51
 229 0040 37EE677A 		vsub.f32	s14, s14, s15
 230              	.LVL12:
 107:source/HvSignalPhasor.c **** #if HV_SIMD_AVX
 231              		.loc 2 107 13 is_stmt 1 discriminator 2 view .LVU52
 232 0044 B4EEE77A 		vcmpe.f32	s14, s15
 233 0048 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 234 004c F8DC     		bgt	.L15
 235              	.L13:
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s 			page 10


 111:source/HvSignalPhasor.c **** #endif
 236              		.loc 2 111 7 view .LVU53
 237              	.LVL13:
 238              	.LBB68:
 239              	.LBI68:
  31:source/HvSignalPhasor.c ****     o->phase = p;
 240              		.loc 2 31 15 view .LVU54
 241              	.LBB69:
  32:source/HvSignalPhasor.c **** #endif
 242              		.loc 2 32 5 view .LVU55
 243              	.LBE69:
 244              	.LBE68:
 111:source/HvSignalPhasor.c **** #endif
 245              		.loc 2 111 47 is_stmt 0 view .LVU56
 246 004e B7EEC77A 		vcvt.f64.f32	d7, s14
 247              	.LVL14:
 111:source/HvSignalPhasor.c **** #endif
 248              		.loc 2 111 47 view .LVU57
 249 0052 9FED056B 		vldr.64	d6, .L24
 250 0056 27EE067B 		vmul.f64	d7, d7, d6
 111:source/HvSignalPhasor.c **** #endif
 251              		.loc 2 111 7 view .LVU58
 252 005a BCEEC77B 		vcvt.u32.f64	s14, d7
 253 005e 81ED007A 		vstr.32	s14, [r1]	@ int
 254              	.LVL15:
 111:source/HvSignalPhasor.c **** #endif
 255              		.loc 2 111 7 view .LVU59
 256              	.LBE70:
 257              		.loc 2 115 1 view .LVU60
 258 0062 7047     		bx	lr
 259              	.L25:
 260 0064 AFF30080 		.align	3
 261              	.L24:
 262 0068 00000000 		.word	0
 263 006c 0000F041 		.word	1106247680
 264              		.cfi_endproc
 265              	.LFE405:
 267              		.section	.text.sPhasor_k_init,"ax",%progbits
 268              		.align	1
 269              		.p2align 2,,3
 270              		.global	sPhasor_k_init
 271              		.syntax unified
 272              		.thumb
 273              		.thumb_func
 275              	sPhasor_k_init:
 276              	.LVL16:
 277              	.LFB406:
 116:source/HvSignalPhasor.c **** 
 117:source/HvSignalPhasor.c **** hv_size_t sPhasor_k_init(SignalPhasor *o, float frequency, double samplerate) {
 278              		.loc 2 117 79 is_stmt 1 view -0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 0
 281              		@ frame_needed = 0, uses_anonymous_args = 0
 282              		@ link register save eliminated.
 118:source/HvSignalPhasor.c ****   __hv_zero_i((hv_bOuti_t) &o->phase);
 283              		.loc 2 118 3 view .LVU62
 284              	.LBB71:
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s 			page 11


 285              	.LBB72:
  75:source/HvSignalPhasor.c ****   o->inc = o->step.s;
 286              		.loc 2 75 46 is_stmt 0 view .LVU63
 287 0000 9FED096B 		vldr.64	d6, .L27
  75:source/HvSignalPhasor.c ****   o->inc = o->step.s;
 288              		.loc 2 75 30 view .LVU64
 289 0004 B7EEC00A 		vcvt.f64.f32	d0, s0
 290              	.LVL17:
  75:source/HvSignalPhasor.c ****   o->inc = o->step.s;
 291              		.loc 2 75 30 view .LVU65
 292              	.LBE72:
 293              	.LBE71:
 117:source/HvSignalPhasor.c ****   __hv_zero_i((hv_bOuti_t) &o->phase);
 294              		.loc 2 117 79 view .LVU66
 295 0008 0246     		mov	r2, r0
 296              	.LBB75:
 297              	.LBB76:
 298              		.file 3 "source/HvMath.h"
   1:source/HvMath.h **** /**
   2:source/HvMath.h ****  * Copyright (c) 2014-2018 Enzien Audio Ltd.
   3:source/HvMath.h ****  *
   4:source/HvMath.h ****  * Permission to use, copy, modify, and/or distribute this software for any
   5:source/HvMath.h ****  * purpose with or without fee is hereby granted, provided that the above
   6:source/HvMath.h ****  * copyright notice and this permission notice appear in all copies.
   7:source/HvMath.h ****  *
   8:source/HvMath.h ****  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
   9:source/HvMath.h ****  * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  10:source/HvMath.h ****  * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  11:source/HvMath.h ****  * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  12:source/HvMath.h ****  * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  13:source/HvMath.h ****  * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  14:source/HvMath.h ****  * PERFORMANCE OF THIS SOFTWARE.
  15:source/HvMath.h ****  */
  16:source/HvMath.h **** 
  17:source/HvMath.h **** #ifndef _HEAVY_MATH_H_
  18:source/HvMath.h **** #define _HEAVY_MATH_H_
  19:source/HvMath.h **** 
  20:source/HvMath.h **** #include "HvUtils.h"
  21:source/HvMath.h **** 
  22:source/HvMath.h **** // https://software.intel.com/sites/landingpage/IntrinsicsGuide/
  23:source/HvMath.h **** // https://gcc.gnu.org/onlinedocs/gcc-4.8.1/gcc/ARM-NEON-Intrinsics.html
  24:source/HvMath.h **** // http://codesuppository.blogspot.co.uk/2015/02/sse2neonh-porting-guide-and-header-file.html
  25:source/HvMath.h **** 
  26:source/HvMath.h **** static inline void __hv_zero_f(hv_bOutf_t bOut) {
  27:source/HvMath.h **** #if HV_SIMD_AVX
  28:source/HvMath.h ****   *bOut = _mm256_setzero_ps();
  29:source/HvMath.h **** #elif HV_SIMD_SSE
  30:source/HvMath.h ****   *bOut = _mm_setzero_ps();
  31:source/HvMath.h **** #elif HV_SIMD_NEON
  32:source/HvMath.h ****   *bOut = vdupq_n_f32(0.0f);
  33:source/HvMath.h **** #else // HV_SIMD_NONE
  34:source/HvMath.h ****   *bOut = 0.0f;
  35:source/HvMath.h **** #endif
  36:source/HvMath.h **** }
  37:source/HvMath.h **** 
  38:source/HvMath.h **** static inline void __hv_zero_i(hv_bOuti_t bOut) {
  39:source/HvMath.h **** #if HV_SIMD_AVX
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s 			page 12


  40:source/HvMath.h ****   *bOut = _mm256_setzero_si256();
  41:source/HvMath.h **** #elif HV_SIMD_SSE
  42:source/HvMath.h ****   *bOut = _mm_setzero_si128();
  43:source/HvMath.h **** #elif HV_SIMD_NEON
  44:source/HvMath.h ****   *bOut = vdupq_n_s32(0);
  45:source/HvMath.h **** #else // HV_SIMD_NONE
  46:source/HvMath.h ****   *bOut = 0;
 299              		.loc 3 46 9 view .LVU67
 300 000a 0023     		movs	r3, #0
 301              	.LBE76:
 302              	.LBE75:
 303              	.LBB79:
 304              	.LBB73:
  75:source/HvSignalPhasor.c ****   o->inc = o->step.s;
 305              		.loc 2 75 46 view .LVU68
 306 000c 86EE017B 		vdiv.f64	d7, d6, d1
 307              	.LVL18:
  75:source/HvSignalPhasor.c ****   o->inc = o->step.s;
 308              		.loc 2 75 46 view .LVU69
 309              	.LBE73:
 310              	.LBE79:
 311              	.LBB80:
 312              	.LBI75:
  38:source/HvMath.h **** #if HV_SIMD_AVX
 313              		.loc 3 38 20 is_stmt 1 view .LVU70
 314              	.LBB77:
 315              		.loc 3 46 3 view .LVU71
 316              	.LBE77:
 317              	.LBE80:
 119:source/HvSignalPhasor.c ****   sPhasor_k_updateFrequency(o, frequency, samplerate);
 120:source/HvSignalPhasor.c ****   return 0;
 121:source/HvSignalPhasor.c **** }
 318              		.loc 2 121 1 is_stmt 0 view .LVU72
 319 0010 1846     		mov	r0, r3
 320              	.LVL19:
 321              	.LBB81:
 322              	.LBB78:
 323              		.loc 3 46 9 view .LVU73
 324 0012 1360     		str	r3, [r2]
 325              	.LVL20:
 326              		.loc 3 46 9 view .LVU74
 327              	.LBE78:
 328              	.LBE81:
 119:source/HvSignalPhasor.c ****   sPhasor_k_updateFrequency(o, frequency, samplerate);
 329              		.loc 2 119 3 is_stmt 1 view .LVU75
 330              	.LBB82:
 331              	.LBI71:
  60:source/HvSignalPhasor.c **** #if HV_SIMD_AVX
 332              		.loc 2 60 13 view .LVU76
 333              	.LBB74:
  75:source/HvSignalPhasor.c ****   o->inc = o->step.s;
 334              		.loc 2 75 3 view .LVU77
  75:source/HvSignalPhasor.c ****   o->inc = o->step.s;
 335              		.loc 2 75 30 is_stmt 0 view .LVU78
 336 0014 27EE007B 		vmul.f64	d7, d7, d0
  75:source/HvSignalPhasor.c ****   o->inc = o->step.s;
 337              		.loc 2 75 15 view .LVU79
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s 			page 13


 338 0018 FDEEC77B 		vcvt.s32.f64	s15, d7
 339 001c 17EE903A 		vmov	r3, s15	@ int
  76:source/HvSignalPhasor.c ****   // no need to update phase
 340              		.loc 2 76 10 view .LVU80
 341 0020 C2E90133 		strd	r3, r3, [r2, #4]
 342              	.LVL21:
  76:source/HvSignalPhasor.c ****   // no need to update phase
 343              		.loc 2 76 10 view .LVU81
 344              	.LBE74:
 345              	.LBE82:
 120:source/HvSignalPhasor.c **** }
 346              		.loc 2 120 3 is_stmt 1 view .LVU82
 347              		.loc 2 121 1 is_stmt 0 view .LVU83
 348 0024 7047     		bx	lr
 349              	.L28:
 350 0026 00BF     		.align	3
 351              	.L27:
 352 0028 00000000 		.word	0
 353 002c 0000F041 		.word	1106247680
 354              		.cfi_endproc
 355              	.LFE406:
 357              		.section	.text.sPhasor_k_onMessage,"ax",%progbits
 358              		.align	1
 359              		.p2align 2,,3
 360              		.global	sPhasor_k_onMessage
 361              		.syntax unified
 362              		.thumb
 363              		.thumb_func
 365              	sPhasor_k_onMessage:
 366              	.LVL22:
 367              	.LFB407:
 122:source/HvSignalPhasor.c **** 
 123:source/HvSignalPhasor.c **** void sPhasor_k_onMessage(HeavyContextInterface *_c, SignalPhasor *o, int letIn, const HvMessage *m)
 368              		.loc 2 123 101 is_stmt 1 view -0
 369              		.cfi_startproc
 370              		@ args = 0, pretend = 0, frame = 0
 371              		@ frame_needed = 0, uses_anonymous_args = 0
 124:source/HvSignalPhasor.c ****   if (msg_isFloat(m,0)) {
 372              		.loc 2 124 3 view .LVU85
 373              	.LBB104:
 374              	.LBI104:
 125:source/HvMessage.h ****   return (index < msg_getNumElements(m)) ? (msg_getType(m,index) == HV_MSG_FLOAT) : false;
 375              		.loc 1 125 20 view .LVU86
 376              	.LBB105:
 377              		.loc 1 126 3 view .LVU87
 378              	.LBB106:
 379              	.LBI106:
  90:source/HvMessage.h ****   return (int) m->numElements;
 380              		.loc 1 90 19 view .LVU88
 381              	.LBB107:
  91:source/HvMessage.h **** }
 382              		.loc 1 91 3 view .LVU89
  91:source/HvMessage.h **** }
 383              		.loc 1 91 3 is_stmt 0 view .LVU90
 384              	.LBE107:
 385              	.LBE106:
 386              	.LBE105:
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s 			page 14


 387              	.LBE104:
 123:source/HvSignalPhasor.c ****   if (msg_isFloat(m,0)) {
 388              		.loc 2 123 101 view .LVU91
 389 0000 10B5     		push	{r4, lr}
 390              		.cfi_def_cfa_offset 8
 391              		.cfi_offset 4, -8
 392              		.cfi_offset 14, -4
 393 0002 0C46     		mov	r4, r1
 394              	.LBB116:
 395              	.LBB112:
 396              		.loc 1 126 83 view .LVU92
 397 0004 9988     		ldrh	r1, [r3, #4]
 398              	.LVL23:
 399              		.loc 1 126 83 view .LVU93
 400              	.LBE112:
 401              	.LBE116:
 123:source/HvSignalPhasor.c ****   if (msg_isFloat(m,0)) {
 402              		.loc 2 123 101 view .LVU94
 403 0006 2DED028B 		vpush.64	{d8}
 404              		.cfi_def_cfa_offset 16
 405              		.cfi_offset 80, -16
 406              		.cfi_offset 81, -12
 407              	.LBB117:
 408              	.LBB113:
 409              		.loc 1 126 83 view .LVU95
 410 000a 11B9     		cbnz	r1, .L46
 411              	.LVL24:
 412              	.L29:
 413              		.loc 1 126 83 view .LVU96
 414              	.LBE113:
 415              	.LBE117:
 125:source/HvSignalPhasor.c ****     switch (letIn) {
 126:source/HvSignalPhasor.c ****       case 0: sPhasor_k_updateFrequency(o, msg_getFloat(m,0), hv_getSampleRate(_c)); break;
 127:source/HvSignalPhasor.c ****       case 1: {
 128:source/HvSignalPhasor.c ****         float p = msg_getFloat(m,0);
 129:source/HvSignalPhasor.c ****         while (p < 0.0f) p += 1.0f; // wrap phase to [0,1]
 130:source/HvSignalPhasor.c ****         while (p > 1.0f) p -= 1.0f;
 131:source/HvSignalPhasor.c **** #if HV_SIMD_AVX
 132:source/HvSignalPhasor.c ****         sPhasor_k_updatePhase(o, p);
 133:source/HvSignalPhasor.c **** #else // HV_SIMD_SSE || HV_SIMD_NEON || HV_SIMD_NONE
 134:source/HvSignalPhasor.c ****         sPhasor_k_updatePhase(o, (hv_uint32_t) (p * HV_PHASOR_2_32));
 135:source/HvSignalPhasor.c **** #endif
 136:source/HvSignalPhasor.c ****         break;
 137:source/HvSignalPhasor.c ****       }
 138:source/HvSignalPhasor.c ****       default: break;
 139:source/HvSignalPhasor.c ****     }
 140:source/HvSignalPhasor.c ****   }
 141:source/HvSignalPhasor.c **** }
 416              		.loc 2 141 1 view .LVU97
 417 000c BDEC028B 		vldm	sp!, {d8}
 418              		.cfi_remember_state
 419              		.cfi_restore 80
 420              		.cfi_restore 81
 421              		.cfi_def_cfa_offset 8
 422 0010 10BD     		pop	{r4, pc}
 423              	.LVL25:
 424              	.L46:
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s 			page 15


 425              		.cfi_restore_state
 426              	.LBB118:
 427              	.LBB114:
 428              	.LBB108:
 429              	.LBI108:
  99:source/HvMessage.h ****   hv_assert(index < msg_getNumElements(m)); // invalid index
 430              		.loc 1 99 27 is_stmt 1 view .LVU98
 431              	.LBB109:
 100:source/HvMessage.h ****   return (&(m->elem)+index)->type;
 432              		.loc 1 100 3 view .LVU99
 100:source/HvMessage.h ****   return (&(m->elem)+index)->type;
 433              		.loc 1 100 3 is_stmt 0 view .LVU100
 434              	.LBE109:
 435              	.LBE108:
 436              	.LBE114:
 437              	.LBE118:
  91:source/HvMessage.h **** }
 438              		.loc 1 91 3 is_stmt 1 view .LVU101
 439              	.LBB119:
 440              	.LBB115:
 441              	.LBB111:
 442              	.LBB110:
 101:source/HvMessage.h **** }
 443              		.loc 1 101 3 view .LVU102
 101:source/HvMessage.h **** }
 444              		.loc 1 101 3 is_stmt 0 view .LVU103
 445              	.LBE110:
 446              	.LBE111:
 447              		.loc 1 126 83 view .LVU104
 448 0012 197A     		ldrb	r1, [r3, #8]	@ zero_extendqisi2
 449 0014 0129     		cmp	r1, #1
 450 0016 F9D1     		bne	.L29
 451              	.LVL26:
 452              		.loc 1 126 83 view .LVU105
 453              	.LBE115:
 454              	.LBE119:
 125:source/HvSignalPhasor.c ****       case 0: sPhasor_k_updateFrequency(o, msg_getFloat(m,0), hv_getSampleRate(_c)); break;
 455              		.loc 2 125 5 is_stmt 1 view .LVU106
 456 0018 62B3     		cbz	r2, .L38
 457 001a 012A     		cmp	r2, #1
 458 001c F6D1     		bne	.L29
 459              	.LBB120:
 128:source/HvSignalPhasor.c ****         while (p < 0.0f) p += 1.0f; // wrap phase to [0,1]
 460              		.loc 2 128 9 view .LVU107
 461              	.LVL27:
 462              	.LBB121:
 463              	.LBI121:
 120:source/HvMessage.h ****   hv_assert(index < msg_getNumElements(m)); // invalid index
 464              		.loc 1 120 21 view .LVU108
 465              	.LBB122:
 121:source/HvMessage.h ****   return (&(m->elem)+index)->data.f;
 466              		.loc 1 121 3 view .LVU109
 121:source/HvMessage.h ****   return (&(m->elem)+index)->data.f;
 467              		.loc 1 121 3 is_stmt 0 view .LVU110
 468              	.LBE122:
 469              	.LBE121:
 470              	.LBE120:
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s 			page 16


  91:source/HvMessage.h **** }
 471              		.loc 1 91 3 is_stmt 1 view .LVU111
 472              	.LBB127:
 473              	.LBB124:
 474              	.LBB123:
 122:source/HvMessage.h **** }
 475              		.loc 1 122 3 view .LVU112
 122:source/HvMessage.h **** }
 476              		.loc 1 122 34 is_stmt 0 view .LVU113
 477 001e 93ED037A 		vldr.32	s14, [r3, #12]
 478              	.LVL28:
 122:source/HvMessage.h **** }
 479              		.loc 1 122 34 view .LVU114
 480              	.LBE123:
 481              	.LBE124:
 129:source/HvSignalPhasor.c ****         while (p > 1.0f) p -= 1.0f;
 482              		.loc 2 129 9 is_stmt 1 view .LVU115
 129:source/HvSignalPhasor.c ****         while (p > 1.0f) p -= 1.0f;
 483              		.loc 2 129 15 view .LVU116
 484 0022 B5EEC07A 		vcmpe.f32	s14, #0
 485 0026 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 486 002a 08D5     		bpl	.L32
 129:source/HvSignalPhasor.c ****         while (p > 1.0f) p -= 1.0f;
 487              		.loc 2 129 28 is_stmt 0 view .LVU117
 488 002c F7EE007A 		vmov.f32	s15, #1.0e+0
 489              	.L34:
 129:source/HvSignalPhasor.c ****         while (p > 1.0f) p -= 1.0f;
 490              		.loc 2 129 26 is_stmt 1 discriminator 2 view .LVU118
 129:source/HvSignalPhasor.c ****         while (p > 1.0f) p -= 1.0f;
 491              		.loc 2 129 28 is_stmt 0 discriminator 2 view .LVU119
 492 0030 37EE277A 		vadd.f32	s14, s14, s15
 493              	.LVL29:
 129:source/HvSignalPhasor.c ****         while (p > 1.0f) p -= 1.0f;
 494              		.loc 2 129 15 is_stmt 1 discriminator 2 view .LVU120
 495 0034 B5EEC07A 		vcmpe.f32	s14, #0
 496 0038 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 497 003c F8D4     		bmi	.L34
 498              	.L32:
 130:source/HvSignalPhasor.c **** #if HV_SIMD_AVX
 499              		.loc 2 130 15 view .LVU121
 500 003e F7EE007A 		vmov.f32	s15, #1.0e+0
 501 0042 B4EEE77A 		vcmpe.f32	s14, s15
 502 0046 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 503 004a 06DD     		ble	.L35
 504              	.L37:
 130:source/HvSignalPhasor.c **** #if HV_SIMD_AVX
 505              		.loc 2 130 26 discriminator 2 view .LVU122
 130:source/HvSignalPhasor.c **** #if HV_SIMD_AVX
 506              		.loc 2 130 28 is_stmt 0 discriminator 2 view .LVU123
 507 004c 37EE677A 		vsub.f32	s14, s14, s15
 508              	.LVL30:
 130:source/HvSignalPhasor.c **** #if HV_SIMD_AVX
 509              		.loc 2 130 15 is_stmt 1 discriminator 2 view .LVU124
 510 0050 B4EEE77A 		vcmpe.f32	s14, s15
 511 0054 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 512 0058 F8DC     		bgt	.L37
 513              	.L35:
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s 			page 17


 134:source/HvSignalPhasor.c **** #endif
 514              		.loc 2 134 9 view .LVU125
 515              	.LVL31:
 516              	.LBB125:
 517              	.LBI125:
  55:source/HvSignalPhasor.c ****   o->phase = p;
 518              		.loc 2 55 13 view .LVU126
 519              	.LBB126:
  56:source/HvSignalPhasor.c **** #endif
 520              		.loc 2 56 3 view .LVU127
 521              	.LBE126:
 522              	.LBE125:
 134:source/HvSignalPhasor.c **** #endif
 523              		.loc 2 134 51 is_stmt 0 view .LVU128
 524 005a B7EEC77A 		vcvt.f64.f32	d7, s14
 525              	.LVL32:
 134:source/HvSignalPhasor.c **** #endif
 526              		.loc 2 134 51 view .LVU129
 527 005e 9FED106B 		vldr.64	d6, .L47
 528              	.LBE127:
 529              		.loc 2 141 1 view .LVU130
 530 0062 BDEC028B 		vldm	sp!, {d8}
 531              		.cfi_remember_state
 532              		.cfi_restore 80
 533              		.cfi_restore 81
 534              		.cfi_def_cfa_offset 8
 535              	.LBB128:
 134:source/HvSignalPhasor.c **** #endif
 536              		.loc 2 134 51 view .LVU131
 537 0066 27EE067B 		vmul.f64	d7, d7, d6
 134:source/HvSignalPhasor.c **** #endif
 538              		.loc 2 134 9 view .LVU132
 539 006a BCEEC77B 		vcvt.u32.f64	s14, d7
 540 006e 84ED007A 		vstr.32	s14, [r4]	@ int
 541              	.LVL33:
 134:source/HvSignalPhasor.c **** #endif
 542              		.loc 2 134 9 view .LVU133
 543              	.LBE128:
 544              		.loc 2 141 1 view .LVU134
 545 0072 10BD     		pop	{r4, pc}
 546              	.LVL34:
 547              	.L38:
 548              		.cfi_restore_state
 126:source/HvSignalPhasor.c ****       case 1: {
 549              		.loc 2 126 15 is_stmt 1 view .LVU135
 550              	.LBB129:
 551              	.LBI129:
 120:source/HvMessage.h ****   hv_assert(index < msg_getNumElements(m)); // invalid index
 552              		.loc 1 120 21 view .LVU136
 553              	.LBB130:
 121:source/HvMessage.h ****   return (&(m->elem)+index)->data.f;
 554              		.loc 1 121 3 view .LVU137
 121:source/HvMessage.h ****   return (&(m->elem)+index)->data.f;
 555              		.loc 1 121 3 is_stmt 0 view .LVU138
 556              	.LBE130:
 557              	.LBE129:
  91:source/HvMessage.h **** }
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s 			page 18


 558              		.loc 1 91 3 is_stmt 1 view .LVU139
 559              	.LBB132:
 560              	.LBB131:
 122:source/HvMessage.h **** }
 561              		.loc 1 122 3 view .LVU140
 122:source/HvMessage.h **** }
 562              		.loc 1 122 34 is_stmt 0 view .LVU141
 563 0074 93ED038A 		vldr.32	s16, [r3, #12]
 564              	.LVL35:
 122:source/HvMessage.h **** }
 565              		.loc 1 122 34 view .LVU142
 566              	.LBE131:
 567              	.LBE132:
 126:source/HvSignalPhasor.c ****       case 1: {
 568              		.loc 2 126 15 view .LVU143
 569 0078 FFF7FEFF 		bl	hv_getSampleRate
 570              	.LVL36:
 571              	.LBB133:
 572              	.LBI133:
  60:source/HvSignalPhasor.c **** #if HV_SIMD_AVX
 573              		.loc 2 60 13 is_stmt 1 view .LVU144
 574              	.LBB134:
  75:source/HvSignalPhasor.c ****   o->inc = o->step.s;
 575              		.loc 2 75 3 view .LVU145
  75:source/HvSignalPhasor.c ****   o->inc = o->step.s;
 576              		.loc 2 75 46 is_stmt 0 view .LVU146
 577 007c 9FED085B 		vldr.64	d5, .L47
  75:source/HvSignalPhasor.c ****   o->inc = o->step.s;
 578              		.loc 2 75 30 view .LVU147
 579 0080 B7EEC88A 		vcvt.f64.f32	d8, s16
 580              	.LVL37:
  75:source/HvSignalPhasor.c ****   o->inc = o->step.s;
 581              		.loc 2 75 46 view .LVU148
 582 0084 85EE007B 		vdiv.f64	d7, d5, d0
  75:source/HvSignalPhasor.c ****   o->inc = o->step.s;
 583              		.loc 2 75 30 view .LVU149
 584 0088 27EE087B 		vmul.f64	d7, d7, d8
 585              	.LBE134:
 586              	.LBE133:
 587              		.loc 2 141 1 view .LVU150
 588 008c BDEC028B 		vldm	sp!, {d8}
 589              		.cfi_restore 80
 590              		.cfi_restore 81
 591              		.cfi_def_cfa_offset 8
 592              	.LBB136:
 593              	.LBB135:
  75:source/HvSignalPhasor.c ****   o->inc = o->step.s;
 594              		.loc 2 75 15 view .LVU151
 595 0090 FDEEC77B 		vcvt.s32.f64	s15, d7
 596 0094 17EE903A 		vmov	r3, s15	@ int
  76:source/HvSignalPhasor.c ****   // no need to update phase
 597              		.loc 2 76 10 view .LVU152
 598 0098 C4E90133 		strd	r3, r3, [r4, #4]
 599              	.LBE135:
 600              	.LBE136:
 601              		.loc 2 141 1 view .LVU153
 602 009c 10BD     		pop	{r4, pc}
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s 			page 19


 603              	.LVL38:
 604              	.L48:
 605              		.loc 2 141 1 view .LVU154
 606 009e 00BF     		.align	3
 607              	.L47:
 608 00a0 00000000 		.word	0
 609 00a4 0000F041 		.word	1106247680
 610              		.cfi_endproc
 611              	.LFE407:
 613              		.section	.rodata.__func__.0,"a"
 614              		.align	2
 615              		.set	.LANCHOR0,. + 0
 618              	__func__.0:
 619 0000 6D73675F 		.ascii	"msg_getFloat\000"
 619      67657446 
 619      6C6F6174 
 619      00
 620              		.text
 621              	.Letext0:
 622              		.file 4 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/machine/_default_types.h"
 623              		.file 5 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/sys/_stdint.h"
 624              		.file 6 "/Library/DaisyToolchain/0.2.0/arm/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 625              		.file 7 "source/HvHeavy.h"
 626              		.file 8 "source/HvSignalPhasor.h"
 627              		.file 9 "/Library/DaisyToolchain/0.2.0/arm/arm-none-eabi/include/assert.h"
ARM GAS  /var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 HvSignalPhasor.c
/var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s:19     .rodata.msg_getFloat.part.0.str1.4:0000000000000000 $d
/var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s:26     .text.msg_getFloat.part.0:0000000000000000 $t
/var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s:32     .text.msg_getFloat.part.0:0000000000000000 msg_getFloat.part.0
/var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s:56     .text.msg_getFloat.part.0:0000000000000010 $d
/var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s:63     .text.sPhasor_init:0000000000000000 $t
/var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s:70     .text.sPhasor_init:0000000000000000 sPhasor_init
/var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s:103    .text.sPhasor_init:0000000000000020 $d
/var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s:109    .text.sPhasor_onMessage:0000000000000000 $t
/var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s:116    .text.sPhasor_onMessage:0000000000000000 sPhasor_onMessage
/var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s:262    .text.sPhasor_onMessage:0000000000000068 $d
/var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s:268    .text.sPhasor_k_init:0000000000000000 $t
/var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s:275    .text.sPhasor_k_init:0000000000000000 sPhasor_k_init
/var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s:352    .text.sPhasor_k_init:0000000000000028 $d
/var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s:358    .text.sPhasor_k_onMessage:0000000000000000 $t
/var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s:365    .text.sPhasor_k_onMessage:0000000000000000 sPhasor_k_onMessage
/var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s:608    .text.sPhasor_k_onMessage:00000000000000a0 $d
/var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s:614    .rodata.__func__.0:0000000000000000 $d
/var/folders/fb/yfxt3z4538j6z0vjt03w70vc0000gn/T//ccN2MCIZ.s:618    .rodata.__func__.0:0000000000000000 __func__.0

UNDEFINED SYMBOLS
__assert_func
hv_getSampleRate
